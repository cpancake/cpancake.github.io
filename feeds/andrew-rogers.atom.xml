<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>the andrew rogers webzone</title><link href="/" rel="alternate"></link><link href="/feeds%5Candrew-rogers.atom.xml" rel="self"></link><id>/</id><updated>2016-11-10T15:57:00-05:00</updated><entry><title>Sam Law in Harambe's Revenge</title><link href="/sam-law-in-harambes-revenge.html" rel="alternate"></link><updated>2016-11-10T15:57:00-05:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2016-11-10:sam-law-in-harambes-revenge.html</id><summary type="html">&lt;p&gt;Once again, I've made a video game. I don't know why. I think it was a joke or something. Anyways, here's an adventure game I made called &lt;em&gt;Sam Law in Harambe's Revenge&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/archives/harambe.zip"&gt;harambe.zip (52.8 MB)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I promise, it's not actually bad at all.&lt;/p&gt;
&lt;p&gt;Special thanks to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connor Norris&lt;/li&gt;
&lt;li&gt;Jonathan Cusdan&lt;/li&gt;
&lt;li&gt;James Rankin&lt;/li&gt;
&lt;li&gt;Bradley Schulze&lt;/li&gt;
&lt;li&gt;Michael Martin&lt;/li&gt;
&lt;li&gt;Yukon Wainczak&lt;/li&gt;
&lt;li&gt;Chloe Tibets&lt;/li&gt;
&lt;li&gt;Ween&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And hey, if you want, you should check out &lt;a href="https://www.anime-night.com/"&gt;Anime Night&lt;/a&gt;. It's a good website and it's not bad.&lt;/p&gt;
&lt;p&gt;If you want to play it on Kongregate, you can do so &lt;a href="http://www.kongregate.com/games/PlasticContainer/sam-law-in-harambes-revenge"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="video games"></category></entry><entry><title>Here's Some Menus</title><link href="/some-menus.html" rel="alternate"></link><updated>2016-09-25T18:53:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2016-09-25:some-menus.html</id><summary type="html">&lt;p&gt;I put some physical menus online. That's pretty much it.&lt;/p&gt;
&lt;p&gt;If you're a college student in the Worcester area, you might find it useful.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://cpancake.me/menus/"&gt;http://cpancake.me/menus/&lt;/a&gt;&lt;/p&gt;</summary><category term="projects"></category></entry><entry><title>Spotify on foobar2000</title><link href="/spotify-on-foobar2000.html" rel="alternate"></link><updated>2016-07-23T02:11:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2016-07-23:spotify-on-foobar2000.html</id><summary type="html">&lt;p&gt;Spotify recently &lt;a href="http://www.digitaltrends.com/music/spotify-lyrics-musixamatch/"&gt;ended its partnership with Musixmatch&lt;/a&gt;, meaning the lyrics feature of Spotify has been removed. I can get lyrics anywhere I want, but how am I going to get lyrics synced to the songs I'm playing in Spotify?&lt;/p&gt;
&lt;p&gt;Their web API doesn't expose any features for this. MPRIS was a dead-end - it's only for the Spotify client on Linux, and it's barely supported and possibly not working at that. So there's no way that I could find of retrieving song details from their native client - and my only other option was finding a way to play Spotify on a different client that has better plugin support.&lt;/p&gt;
&lt;p&gt;My first stop was foobar2000, a music player almost legendary for the amount of customization it offers. And, lucky enough, there's already &lt;a href="https://github.com/FauxFaux/foo_input_spotify"&gt;a plugin available for Spotify URIs in foobar2000&lt;/a&gt;. Just one major problem: it hasn't been updated in almost five years, and it crashes foobar2000 when you launch it.&lt;/p&gt;
&lt;p&gt;Good news: I got it working, and you can do it too!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You will need a Spotify premium account for this.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;The Easy Way&lt;/h2&gt;
&lt;p&gt;Do you trust me? Good. Download the version I compiled here: &lt;a href="/archives/foo_input_spotify.zip"&gt;foo_input_spotify.zip (1.5MB)&lt;/a&gt;. Open up foobar2000, go to File &amp;gt; Preferences, and click "Install..." in the bottom right. Select the zip. Click apply, restart, and head on down to Usage!&lt;/p&gt;
&lt;h2&gt;The Hard Way&lt;/h2&gt;
&lt;p&gt;Don't trust me? Ok, sure, whatever. But you're going to need to get yourself a copy of Visual Studio 2015 (don't worry, it's free). Once you've done that, download &lt;em&gt;source code&lt;/em&gt; of the &lt;code&gt;foo_input_spotify&lt;/code&gt; module linked before (or click &lt;a href="https://github.com/FauxFaux/foo_input_spotify/archive/master.zip"&gt;here&lt;/a&gt;). Once you've done that, you'll need to download the latest foobar2000 SDK, found &lt;a href="http://www.foobar2000.org/SDK"&gt;here&lt;/a&gt;. Extract it into the foobar-sdk folder in the source code you just downloaded, so that the sdk-readme.html file in the SDK is in the location &lt;code&gt;foobar-sdk/sdk-readme.html&lt;/code&gt;, relative to the source code.&lt;/p&gt;
&lt;p&gt;Now, you'll need to download the libspotify binary. Here's a problem: you can't download it anymore! Since the Spotify apparently doesn't understand the benefit of allowing third party developers to extend your service, they've discontinued libspotify, removed all downloads, and &lt;em&gt;haven't provided a direct replacement&lt;/em&gt;. Honestly.&lt;/p&gt;
&lt;p&gt;Don't worry, though, the Internet Archive is here to save what jerk developers won't. If you head over to the &lt;a href="https://web.archive.org/web/20160417073434/https://developer.spotify.com/technologies/libspotify/"&gt;old libspotify page on archive.org&lt;/a&gt;, you can download the most recent binaries. You'll be looking for the third on the list, the Win32 libspotify binary. Download that and extract it into the libspotify folder in the source code, so that the README file is at &lt;code&gt;libspotify/README&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now you're ready to get compiling! Open up &lt;code&gt;foo_input_spotify.sln&lt;/code&gt; in Visual Studio 2015, build the solution, and... hey, what's with all these errors?&lt;/p&gt;
&lt;p&gt;For whatever reason, the solution doesn't seem to compile correctly, at least for me. So you're going to need to do a bit of project reconfiguration.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cannot open include file: 'windows.h'&lt;/code&gt;: for me, the include directory for the Windows SDK is in &lt;code&gt;C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Include&lt;/code&gt;. Go to the properties for foo_input_spotify, and under C/C++ -&amp;gt; General, add the path to the SDK to the "Additional Include Directories" field.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cannot open include file: 'ctype.h'&lt;/code&gt;: the C Runtime Library is located in &lt;code&gt;C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt&lt;/code&gt; for me. Put this path in the same place you put the path to the Windows SDK (remember to include a semicolon between the paths!)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cannot open input file '..\libspotify\lib\spotify.lib'&lt;/code&gt;: I guess libspotify.lib used to be named something different in the version this guy was using? Go to the properties for foo_input_spotify, go to Linker -&amp;gt; Input, and in the "Additional Dependencies" field, change &lt;code&gt;..\libspotify\lib\spotify.lib&lt;/code&gt; to &lt;code&gt;..\libspotify\lib\libspotify.lib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mismatch detected for 'RuntimeLibrary': value 'MT_StaticRelease' doesn't match value 'MD_DynamicRelease' in cred_prompt.obj&lt;/code&gt;: Once again in the project properties for foo_input_spotify, go to C/C++ -&amp;gt; Code Generation, and change the value to "Multi-threaded" or "Multi-threaded Debug".&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's one more thing you &lt;em&gt;might&lt;/em&gt; need to do - I'm not sure. If it doesn't work, you could try changing the API key in &lt;code&gt;key-930.c&lt;/code&gt; in the foo_input_spotify source. You can get an API key &lt;a href="https://devaccount.spotify.com/my-account/keys/"&gt;here&lt;/a&gt;. I'm not sure if you need to do this, as I replaced the API key with mine when I downloaded it. &lt;/p&gt;
&lt;p&gt;Now, it should build correctly. Almost there! The built component is in &lt;code&gt;foobar2000/user-components/foo_input_spotify&lt;/code&gt;, relative to the source code. Take &lt;code&gt;libspotify.dll&lt;/code&gt; from the libspotify folder and copy it to this folder. Then, copy this folder to &lt;code&gt;%AppData\foobar2000\user-components&lt;/code&gt;. Once you start/restart foobar2000, it should be enabled!&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;Open up foobar2000 and go to File &amp;gt; Add Location (or press Ctrl-U). This will bring up the "Add Location" menu. Take a spotify URI from the official client, like &lt;code&gt;spotify:track:5IRkM1WyCMDXPnabEeqz5i&lt;/code&gt; or &lt;code&gt;spotify:user:communistpancake:playlist:2jYKvcXFolpUexOaOX3r7h&lt;/code&gt;. This should add the track(s) to your playlist. You can also search using &lt;code&gt;spotify:search:&amp;lt;term&amp;gt;&lt;/code&gt;, like &lt;code&gt;spotify:search:dead kennedys&lt;/code&gt;. This will add the first twenty results to your playlist, which isn't the best way to search - I recommend using the official client or the web client and just copying the URLs.&lt;/p&gt;
&lt;p&gt;The first time you use the API, it'll ask you for your Spotify credentials, which are saved securely to the Windows credential store. Remember - you need a Spotify premium account for this!&lt;/p&gt;
&lt;h2&gt;Lyrics&lt;/h2&gt;
&lt;p&gt;Right - the original purpose of this.&lt;/p&gt;
&lt;p&gt;What I found was the best is to just download &lt;a href="http://www.foobar2000.org/components/view/foo_uie_lyrics3"&gt;this plugin&lt;/a&gt;, which displays a pane with lyrics synced to the song's current position. It looks for local lyrics though, so it's only useful with &lt;a href="https://github.com/tripod31/foo_lyricsource"&gt;this plugin&lt;/a&gt;, which fetches lyrics from a variety of sources.&lt;/p&gt;
&lt;p&gt;That's it. Good luck, and have fun!&lt;/p&gt;</summary><category term="spotify"></category><category term="music"></category><category term="programming"></category></entry><entry><title>Who is Satoshi Nakamoto?</title><link href="/satoshi-nakamoto.html" rel="alternate"></link><updated>2016-05-23T19:03:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2016-05-23:satoshi-nakamoto.html</id><summary type="html">&lt;p&gt;Let’s talk about Satoshi Nakamoto - the creator of Bitcoin.&lt;/p&gt;
&lt;p&gt;You’ve probably heard his name in the news lately. That’s because a man named Craig S. Wright recently claimed to be the man behind this pseudonym. He’s almost certainly not, but we’ll get to that later.&lt;/p&gt;
&lt;p&gt;Craig S. Wright is the only person to claim to be Satoshi Nakamoto and actually provide some evidence to back it up. He’s actually done it twice. But several people over the years have been accused of being Satoshi Nakamoto. Was he Dorian Satoshi Nakamoto, a 64-year-old Japanese-American former defense contractor? Or was he Hal Finney, a programmer working for the PGP corporation developing cryptography software, who died of ALS in 2014? Or even Nick Szabo, a cryptographer who in 2005 published the idea for a currency called "Bit Gold", which was strikingly similar to Bitcoin, released three years later? &lt;/p&gt;
&lt;p&gt;We’re going to go through all of these theories. But first, let’s talk about what we know about Satoshi Nakamoto himself.&lt;/p&gt;
&lt;p&gt;Satoshi Nakamoto, the identity, was born in May of 2008 when he published the original Bitcoin whitepaper to a cryptography mailing list. This whitepaper was a short eight-page overview, meant for technically-minded readers, about how such a system would work. Nakamoto had found a way to combine pre-existing cryptographic constructs in such a way to make a system like Bitcoin possible. Despite the novelty of a system that could allow money to be transmitted over the internet, Bitcoin wasn’t immediately popular.&lt;/p&gt;
&lt;p&gt;This original post can provide us with some clues as to who Satoshi Nakamoto is. For one, the name seems likely to be a pseudonym. The english in his original post is perfect, and certain words in the whitepaper are spelled in the British fashion. This suggests that Satoshi Nakamoto lived somewhere that is or was part of the UK. And this does not include Japan.&lt;/p&gt;
&lt;p&gt;There is also something implied by the fact that he saw a need to create Bitcoin. This implies some amount of distrust of financial institutions and the government. &lt;/p&gt;
&lt;p&gt;A few months later, in January of 2009, Nakamoto released version 0.1 of the Bitcoin software. With this, he created the "genesis block", the first block in the Bitcoin blockchain. This block included a message - it was the headline of the British newspaper The Times, and read "Chancellor on brink of second bailout for banks". This adds more evidence to the theory that Nakamoto is British, and that he sees a problem with the traditional banking system.&lt;/p&gt;
&lt;p&gt;One of the first replies to Nakamoto’s release of Bitcoin was by a man named Hal Finney. Finney was born in California in 1956, graduating from Caltech in 1981 with a BS in Engineering. He then went into video game development, with his credits including the Atari 2600 games Adventures of Tron, Armor Ambush, and Astrosmash. His previous exploits in cryptography included postings on the legendary Cypherpunks mailing list and running a contest to break the Netscape internet browser’s encryption. In 2004, he published a reusable proof-of-work system, commenting on its possible applications in an online payment system.&lt;/p&gt;
&lt;p&gt;Hal Finney was the first person to receive a Bitcoin transaction, from Satoshi Nakamoto himself. Bitcoin itself used a proof-of-work system similar to what Finney had proposed. Finney’s history in cryptography, his previous work, and his proximity to the Bitcoin project until his death in 2014 all suggest that he might be Satoshi Nakamoto. But is he? Let’s see what other possibilities there are.&lt;/p&gt;
&lt;p&gt;Even though we just started, it’s time for Satoshi Nakamoto to leave this story. Nakamoto’s involvement in the project only lasted until mid-2010, and that’s long before Bitcoin really became interesting. In 2010, Satoshi started talking to a developer named Gavin Andresen. Andresen, a developer based in Amherst, Massachusetts, had only recently started contributing to the Bitcoin project. He’d created a site called "Bitcoin Faucet", which would give free Bitcoins to anyone who wanted to play around with them. As Andresen became more involved in the project, Nakamoto began to trust his judgement more and more. Eventually, Nakamoto offered to place Andresen’s email address on the Bitcoin website, as someone people could contact for help. What Andresen didn’t know was that his email was replacing Nakamoto’s - Nakamoto was, in a kind of sneaky way, distancing himself from the project.&lt;/p&gt;
&lt;p&gt;Soon after, Nakamoto handed over control of the project page, and the key to the Bitcoin alert system to Andresen. He hasn’t been heard from since, and though Nakamoto controls around a million bitcoins, worth around $440 million dollars at this time, they haven’t been moved. &lt;/p&gt;
&lt;p&gt;Why did he leave the project? There’s several theories. One of them was that he was displeased as to the transformation of the Bitcoin community from that of a small group of cryptography-minded futurists to one of money-focused libertarians and anarchists. However, there is some evidence that he was worried about increasing government interest into Bitcoin. Some of his last posts on the Bitcoin Forums were about his fears that Wikileaks accepting Bitcoin donations might lead to the wrong kind of attention on the project, stating that "the heat you would bring would likely destroy us at this stage." Probably the most damning evidence for this theory is that Gavin Andresen states that his last email to Nakamoto was about a meeting Andresen was about to have with the CIA about Bitcoin.&lt;/p&gt;
&lt;p&gt;Whatever the reason, Nakamoto was gone by the end of 2010. But the human mind, in the absence of facts, loves to speculate. Such was the case with Nakamoto: now that he was gone, people began to speculate about his true identity.&lt;/p&gt;
&lt;p&gt;The first serious theory as to his identity came about in 2011. It was then, in a piece in the New Yorker, that Joshua Davis claimed that the true identity of Satoshi Nakamoto was that of Michael Clear, a graduate student in cryptography at Trinity College in Dublin. He’d written papers about peer-to-peer technology, which Bitcoin uses, and had worked for Allied Irish Banks on improving their currency trading software. Evidently, Clear had a fair bit of experience in economics and cryptography. Davis met Clear, and Clear pointed him to another man named Vili Lehdonvirta. Lehdonvirta denied it, and Clear stated that "I’m not Satoshi, but even if I was I wouldn’t tell you." After the story was published, Clear stated that he was joking when he said "even if I was I wouldn’t tell you," and that he was definitely not Satoshi Nakamoto.&lt;/p&gt;
&lt;p&gt;The day after the link was made between Clear and Nakamoto, another author published their theory. This author, Adam Penenberg, had taken phrases from the Bitcoin whitepaper and googled them, with the idea that the true author of Bitcoin would repeat themselves. This led them to a patent application for a "System and method for providing secure communications," filed just three days before the "bitcoin.org" domain name had been registered. This patent had included the term "computationally impractical to reverse," which it shared with the Bitcoin whitepaper. This author reasoned that the chances of a patent of a cryptographic system being filed three days before Bitcoin’s domain name was registered, sharing a phrase with the Bitcoin whitepaper, and yet being completely unrelated to Bitcoin in any way was pretty slim. The patent was filed by three people: Neal King, Vladimir Oksman, and Charles Bry. The author then goes on to provide evidence they admit is circumstantial to continue linking them to Bitcoin. &lt;/p&gt;
&lt;p&gt;While none of this proves that King, Oksman, and Bry are the true creators of Bitcoin, there’s no reason to believe that Satoshi Nakamoto is just one person.&lt;/p&gt;
&lt;p&gt;In 1934, a group of French mathematicians met in a Parisian cafe. Their purpose was to describe math from the ground up, describing every modern mathematical concept, including complete proofs. The group chose to publish under the name Nicolas Bourbaki. Though the group’s members weren’t anonymous like those of a possible Satoshi Nakamoto group, there certainly exists a historical precedent for a group of likeminded people to take on a pseudonym with the purpose of accomplishing a goal. &lt;/p&gt;
&lt;p&gt;But without any definitive proof linking the three to Bitcoin, the search continued.&lt;/p&gt;
&lt;p&gt;In December of 2013, a blogger, who went by the name of Skye Grey, claimed to have linked the writing of Satoshi Nakamoto to that of a researcher named Nick Szabo using stylometric analysis. Stylometry is basically trying to compare the writing style of two people to check if they’re the same, and this blogger claimed that Szabo was the closest match. Later, in April of 2014, a team of forty graduate students in forensic linguistics at Ashton University took a look at it. The leader of the study, Dr. Jack Grieve, stated that "We are pretty confident that out of the list of people regularly referred to as possibilities, Nick Szabo is the main author of the paper, though we can’t rule out the possibility that others contributed." Szabo denies any link, and told one author that "I'm afraid you got it wrong doxing me as Satoshi, but I'm used to it." "Doxxing" is an internet term used to mean publishing someone’s personal information - their "dox" - generally for use by internet vigilantes. In this case, though, he’s using it to mean "accusing." &lt;/p&gt;
&lt;p&gt;While Dr. Grieve’s study was still underway, another theory came up. Newsweek, the news magazine, had transitioned to digital-only publishing at the end of 2012. But the company was bought in August of 2013, and announced that they were returning to print on March 7th, 2014. For this triumphant return to print, they decided that their cover story was going to be about Satoshi Nakamoto, titled "The Face Behind Bitcoin." This story, written by Leah Goodman, claimed that the creator of Bitcoin was a man named Satoshi Nakamoto… Dorian Satoshi Nakamoto. Goodman’s theory was that Satoshi Nakamoto couldn’t be a synonym, though the justification for why it wouldn’t be wasn’t quite satisfactory for many. But she went and met Dorian Nakamoto. Dorian, born in 1949 in Japan, moved to California with his mother at age ten. There, he became interested in science and math, later working for Hughes Aircraft on classified defense projects after college. He was a libertarian, and distrusted the government. He also hadn’t had a steady job since 2001, which would give him the time to develop Bitcoin. His family described him as strange, secretive, and paranoid, which seem to fit the Satoshi Nakamoto who created Bitcoin. When Goodman met Satoshi Nakamoto, he said very little: "I am no longer involved in that and I cannot discuss it. It's been turned over to other people. They are in charge of it now. I no longer have any connection." So that’s a pretty solid confirmation, then, right? Well, no. Nakamoto, through his lawyer, denied having ever worked on Bitcoin. And a reply like that is exactly the kind of reply one would give if they had a limited grasp of english and had worked on classified projects in their past. And that still doesn’t answer - why would someone who values their anonymity choose to go by their real name online?&lt;/p&gt;
&lt;p&gt;Here’s an interesting tidbit - Dorian Nakamoto lived just blocks from Hal Finney. Had Nakamoto been the person who created Bitcoin, it could be that this is the reason that Finney was the first recipient of a Bitcoin transaction. And if Finney had created Bitcoin, this could be how he came up with the name.&lt;/p&gt;
&lt;p&gt;And here’s where we get to Craig S. Wright. Unlike the others, Wright doesn’t deny being Satoshi Nakamoto. In fact, he’s the one who’s claimed to be him - twice. The first time, on December 8th, 2015, Wired Magazine claimed that the true Satoshi Nakamoto was Craig Steven Wright. They discovered this thanks to an "anonymous source close to Wright" who provided them with the evidence. This evidence was, as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A blogpost by Wright from August 2008, months before Satoshi Nakamoto’s original announcement, stating that he was working on a, quote, "cryptocurrency paper." A cryptocurrency is the anachronistic term for currencies like Bitcoin. I say "anachronistic" because "cryptocurrency" as a term didn’t exist until years after Bitcoin came along.&lt;/li&gt;
&lt;li&gt;Another post on the blog stating that users could get in touch with him using a PGP public key linked to Satoshi Nakamoto. A PGP public key is a one-way encryption key - it can encrypt messages, but it can’t decrypt messages. So you can publish your "public key" and keep your private key, and people can send you encrypted messages but only you can decrypt them. This public key was linked to the email address "satoshin@vistomail.com", an address Nakamoto was known to control, and was dated on a public PGP key database as being added October 30th, 2008. &lt;/li&gt;
&lt;li&gt;A $30m Bitcoin investment by Wright into a trust he operated. They reason that he got these Bitcoins because he was Satoshi Nakamoto, owner of a vast Bitcoin fortune.&lt;/li&gt;
&lt;li&gt;More "Leaked details" from their "anonymous source"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But it soon came out that most of these details were fabricated. The blog posts had been edited after the fact. The PGP key had been added to the database in 2015 and backdated to 2008. &lt;/p&gt;
&lt;p&gt;As for his investment in the trust - well, he didn’t actually "transfer" the Bitcoin to the trust - he just "assigned the rights" to the Bitcoin. Meaning that he didn’t actually have to prove that he had them.&lt;/p&gt;
&lt;p&gt;The day after the article was published, Wright had his house raided by the Australian Federal Police over an Australian Tax Office investigation. It seems that his claim that he was the true Satoshi Nakamoto could be involved in several interwoven layers of scams, involving $1.5m dollars that the Australian Tax Office paid out to one of his companies that they’d really like to get back.&lt;/p&gt;
&lt;p&gt;Whatever the reason for his claim, if he is Satoshi Nakamoto, he’s going through a lot of work to make it look like he’s trying to lie about it. &lt;/p&gt;
&lt;p&gt;His second attempt came earlier this month. On May 2nd, he wrote a blog post claiming - again - to be Satoshi Nakamoto. Then, journalists from The Economist and the BBC claimed to have watched Wright demonstrate that he had the private key associated with the first Bitcoin transaction. This claim was backed up by Gavin Andresen. He then published a blog post claiming that it contained cryptographic proof of his Nakamoto-ness, to which several people - including Bitcoin developers Peter Todd and Jeff Garzik - stated that it contained no proof whatsoever, and that security researcher Dan Kaminsky claimed was "intentional scammery." Wright then claimed that he would provide "a series of foundations for this extraordinary claim," but the next day stated that he "did not have the courage" to publish the proof. &lt;/p&gt;
&lt;p&gt;Given that Wright’s proof is either told to us second hand by tech journalists or is falsified, it’s easy to say that he’s not the true Satoshi Nakamoto. But what of the others? Every one of these theories has several reasons why it could be and several reasons why it couldn’t. And when the evidence is as circumstantial as it is either way, it’s hard to make a definitive claim that someone is or isn’t Satoshi Nakamoto (well, other than Wright - we can definitely say he is). The best proof would be for someone to move Satoshi Nakamoto’s coins. That way, we would know that either they are the real Satoshi Nakamoto, or they got ahold of his Bitcoin wallet somehow - and that’s more than anyone else can say. And until that happens? We probably won’t know. &lt;/p&gt;</summary><category term="projects"></category></entry><entry><title>I Made a RuneScape Bot</title><link href="/runescape-bot.html" rel="alternate"></link><updated>2016-05-05T16:18:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2016-05-05:runescape-bot.html</id><summary type="html">&lt;p&gt;I've gotten back into RuneScape recently - old school, of course. It's a good game to play when you're trying to pay attention to something else, because the entire game is about grinding. &lt;/p&gt;
&lt;p&gt;Something I've always hated with RuneScape is that there's no "Drop All of Type" option. If I'm grinding mining or something, and I get a bunch of ore, sometimes I just want to drop it all on the ground instead of having to head to the bank to deposit it. Sadly, this feature has never been added.&lt;/p&gt;
&lt;p&gt;So to fix this, I made a bot to do it. Here's a video:
&lt;div class="videobox"&gt;
            &lt;video width="960" height="540" preload="none" controls poster="None"&gt;&lt;source src='/videos/dropbot.webm' type='video/webm; codecs=vp8, vorbis'&gt;&lt;/video&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;It's actually pretty simple. The "Find Inventory Items" step just takes a screenshot of the RuneScape window, then seperates out the images of each item. It then filters out the background (just using a list of colors), and computes an average hash of the image for comparison with other items. The "Drop" step then finds all the items of a type, selects a random point on each item, and lerps between the item positions and simulates mouse clicks. That's basically it.&lt;/p&gt;
&lt;p&gt;I'm not releasing it yet because it's incredibly buggy and doesn't work with anything other than the desktop Old School RuneScape client with a member account running in the default size. Maybe I'll release it. Maybe not! I don't know.&lt;/p&gt;</summary><category term="projects"></category></entry><entry><title>Hamlet: The Movie: The Game</title><link href="/hamlet-the-movie-the-game.html" rel="alternate"></link><updated>2015-12-17T17:11:00-05:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2015-12-17:hamlet-the-movie-the-game.html</id><summary type="html">&lt;p&gt;Here's a game I made for a school project. It's called &lt;em&gt;Hamlet: The Movie: The Game&lt;/em&gt;, despite having basically nothing to do with any of the &lt;em&gt;Hamlet&lt;/em&gt; movies. It is, however, a game. A rhythm game! Yeah.&lt;/p&gt;
&lt;p&gt;Here's the download:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/archives/hamlet.zip"&gt;hamlet.zip (42.1 MB)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Give it a play or whatever you do with video games. &lt;/p&gt;
&lt;p&gt;Here's some credits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Me - I made the game.&lt;/li&gt;
&lt;li&gt;Various models by Nemeth Designs, oliviergide, arataca, and DGordillo&lt;/li&gt;
&lt;li&gt;The song is Samurai by F.C.F.&lt;/li&gt;
&lt;li&gt;The voice clips are from the Mel Gibson &lt;em&gt;Hamlet&lt;/em&gt; film.&lt;/li&gt;
&lt;li&gt;The character models were created in Mixamo.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="video games"></category></entry><entry><title>Rant Lite (a very bad idea)</title><link href="/rant-lite.html" rel="alternate"></link><updated>2015-07-26T05:26:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2015-07-26:rant-lite.html</id><summary type="html">&lt;p&gt;For once, I finally have a project where I want to use Rant instead of just contributing to it. The problem is that this project is written in Javascript - specifically, browser-based Javascript - so I can't use Rant out of the box. So I thought I'd try out JSIL, a tool that converts compiled IL code (.NET assemblies) into Javascript. How bad could it be?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pretty bad." src="/images/rant-lite-1.png" /&gt;&lt;/p&gt;
&lt;p&gt;If you don't think nearly 25MB of scripts is ridiculous, you probably don't do much web dev. jQuery, clocking in at ~82kb minified, is considered hefty. This size was just unmanageable. So I thought "Well, maybe if I minify it?"&lt;/p&gt;
&lt;p&gt;&lt;img alt="Erm, sort of." src="/images/rant-lite-2.png" /&gt;&lt;/p&gt;
&lt;p&gt;Well, that kind of worked. It squeezed out about 5MB, which is alright. It's still not good enough. So I tried gzipping it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Woop!" src="/images/rant-lite-3.png" /&gt;&lt;/p&gt;
&lt;p&gt;I'd prefer smaller, but 1.4MB is good enough. But then the question arose: how am I going to get it to clients? I don't want the server to have to gzip 19MB of content on every request, and it should be loaded during the asset loading stage anyways so that the page doesn't hang. It was then that I came up with a very bad idea: I was already using browserify, which has a ported version of zlib. I wonder...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;extractJsz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;zlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gunzipSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Utf8ArrayToStr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Utf8ArrayToStr implementation goes here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It was a bad idea, but it worked. It was slow, but it was faster than downloading 19MB of scripts. However, there was another problem: while the script was executing, it wasn't &lt;em&gt;working&lt;/em&gt;. It was then that I went back and bothered to read the rest of the docs for JSIL.&lt;/p&gt;
&lt;p&gt;Apparently, though there are no hidden secrets for reducing the size of your scripts by 24MB (at least none that I found), the docs did contain a "helpful" bit of information: JSIL comes with a synchronous loader that it forces you to use. That is, you can't load your scripts the way you want to load them - at least, not in a way that's documented - and more importantly, there's no way I could fit my hacked together gzipping contraption into there. I also just didn't like the idea of having to package so many loose dependencies loaded outside of my control. So I came up with a different, possibly worse idea.&lt;/p&gt;
&lt;h2&gt;Rant Lite&lt;/h2&gt;
&lt;p&gt;With JSIL off the table, I looked at my options for porting Rant to Javascript. I could either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Port Rant to Javascript.&lt;/li&gt;
&lt;li&gt;Port a small part of Rant to Javascript.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I went with the second option, because I'm lazy. I put together a PEG.js grammar, wrote a loader for rantpkg files, and a really lazy runtime. And yes, it's recursive. I'm sorry.&lt;/p&gt;
&lt;p&gt;The result is a clone of Rant that only supports queries, blocks, and block weights. Because as far as I can tell, that's all I need. It only supports loading rantpkg files, since it's easier than trying to write a new dictionary format parser in Javascript. And it doesn't support multiple queries on the first item in a block, because I fucked up the grammar and I'll fix it later damn it.&lt;/p&gt;
&lt;p&gt;The resulting PEG.js grammar looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;rant&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="nx"&gt;item&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;block&lt;/span&gt;
  &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;
  &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;text_acceptable&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;block&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;first_weight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;block_weight&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;first_item&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;block_item&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;|&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;block_weight&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;block_item&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;}&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;first_item&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;weights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;first_weight&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;first_weight&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;block&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;weights&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;weights&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;block_weight&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;block_item&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;
  &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;text_acceptable&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;query&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;acceptable&lt;/span&gt; &lt;span class="nx"&gt;subtype&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;.]&lt;/span&gt;&lt;span class="nx"&gt;acceptable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;acceptable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subtype&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;subtype&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;query&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;subtype&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cs&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;number&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;.][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="nx"&gt;acceptable&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Za&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;z0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;

&lt;span class="nx"&gt;text_acceptable&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Za&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;z0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;!:&lt;/span&gt;&lt;span class="p"&gt;;,&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="o"&gt;%&amp;amp;&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I might release it at some point, but I don't see anyone else really having much use for it. Plus I don't think it's Rant compatible. At some point I'll get around to writing a proper Javascript port of Rant. One of these days...&lt;/p&gt;</summary><category term="programming"></category><category term="rant"></category></entry><entry><title>Richard 1.0 - Rant's New Scripting Engine</title><link href="/richard.html" rel="alternate"></link><updated>2015-06-26T04:10:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2015-06-25:richard.html</id><summary type="html">&lt;p&gt;Rant 2.0 is almost here, and it launches with a new scripting language I wrote called Richard! We're still ironing out the bugs and writing the documentation and the standard library, but here's a post describing most of what Richard is about.&lt;/p&gt;
&lt;h2&gt;The History of Richard&lt;/h2&gt;
&lt;p&gt;Let's look back to Rant 1.0, all those months ago. Rant 1.0 had a syntax for simple arithmetic operations. This supported basic math operations as well as variables. A simple arithmetic expression would look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;`a = 10; a += 5; a` # 15
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Though it served its purpose well, it lacked many features. The only variable type was a number type (double), and any kind of control flow wasn't possible. The &lt;a href="https://github.com/TheBerkin/Rant/tree/2222c119d08235abd611de81427605230c0fb9b4/Rant/Engine/Arithmetic"&gt;arithmetic parser&lt;/a&gt; itself wasn't well integrated with the rest of Rant, using a different lexer and "VM" than the rest of Rant.&lt;/p&gt;
&lt;p&gt;The new scripting system was originally divided into separate issues: &lt;a href="https://github.com/TheBerkin/Rant/issues/40"&gt;we needed to add a string type to the arithmetic system&lt;/a&gt;, we needed to integrate the variable system with all the other types of variables (carriers and subroutines), and we needed to integrate the parser with the rest of Rant. We eventually realized that we would be better off just redesigning the language itself, leading to &lt;a href="https://github.com/TheBerkin/Rant/issues/46"&gt;the idea of a new language inside of Rant called Rave&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Originally, &lt;a href="https://github.com/TheBerkin/Rant/issues/49"&gt;Rave was going to compile into bytecode&lt;/a&gt; similar to IL, which would run on a VM within Rant. However, &lt;a href="https://github.com/TheBerkin/Rant/pull/54"&gt;Berkin figured out a way to restructure the Rant parser and VM to remove recursion&lt;/a&gt;, and we decided that using this system for Rave would be best. At some point Berkin decided to use Rave as the name of &lt;a href="https://github.com/TheBerkin/Rant/tree/dev/Rave"&gt;the Rant command line utility for dictionaries&lt;/a&gt;, and so the scripting engine was renamed Richard, for completely mature reasons.&lt;/p&gt;
&lt;p&gt;After a lot of hard work and spaghetti code, Richard was committed in &lt;a href="https://github.com/TheBerkin/Rant/commit/901be7f109701df7711586338d6b94e9d39f17e5"&gt;901be7f&lt;/a&gt;. We're still working out the bugs and adding some new features.&lt;/p&gt;
&lt;h2&gt;The Basics&lt;/h2&gt;
&lt;p&gt;Richard is pretty similar to Javascript, if Javascript was smaller, less featureful, and written by someone who had never written a programming language before. It runs within Rant, and is contained within a [@ ... ] tag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[@ 2 + 2 ]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Richard has variables - obviously - of which there are two syntaxes. The regular &lt;code&gt;name = value;&lt;/code&gt; syntax works, and will create the variable in the current scope. There is also a &lt;code&gt;var name = value;&lt;/code&gt; or just &lt;code&gt;var name;&lt;/code&gt; syntax, which will create the variable in the current scope whether or not a value is given.&lt;/p&gt;
&lt;p&gt;There are nine basic types in Richard:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;number&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;string&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bool&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;object&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pattern string&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;no&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;undefined&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And what are all of these sweet types?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;number&lt;/strong&gt; types are internally represented as a double (i.e. a 64-bit double-precision number). Basic infix operations are supported - &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt; - as well as groups - &lt;code&gt;(2 + 2) / 2&lt;/code&gt;. Order of operations applies, of course. There are assignment versions of those as well - &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, &lt;code&gt;/=&lt;/code&gt;, and &lt;code&gt;%=&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;string&lt;/strong&gt; types are .NET strings internally, which means I think they support Unicode. I'm not entirely sure. They are delimited by double quotes - single quotes not supported. There is a length property, accessible through the same way as any other object property - &lt;code&gt;"string".length&lt;/code&gt; or &lt;code&gt;"string"["length"]&lt;/code&gt;. You can also use an array indexer if you want to get a certain character of a string i.e. &lt;code&gt;"string"[2] # "r"&lt;/code&gt;. String concatenation is done using a special operator à la D. That is, the operator is &lt;code&gt;~&lt;/code&gt;. It will cast whatever is on the right side of it to a string if it isn't already a string, but the left side must be either a string or a pattern string. There is also an assignment version - &lt;code&gt;~=&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;bool&lt;/strong&gt; types are just simple booleans. &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, you know the deal. There are a few boolean operators which return bool values. You probably know these from other languages: &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, and &lt;code&gt;!&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;list&lt;/strong&gt; types are lists of objects. There are three ways of defining them: a bare list syntax, using just commas - &lt;code&gt;x = 1, 2, 3, 4, 5;&lt;/code&gt;, a bracket syntax like in Javascript - &lt;code&gt;x = [1, 2, 3, 4, 5]&lt;/code&gt;, and a list initializer for creating empty lists of a certain length - &lt;code&gt;x = list 12;&lt;/code&gt;. When using the bare list syntax, any variables specified within that are lists will be expanded - that is, you can use the bare list syntax to concat two lists together: &lt;code&gt;x = 1, 2; y = 3, 4, 5; z = x, y;&lt;/code&gt;. If you don't want this, you can use the bracket syntax. You should also use the bracket syntax for creating a list of lists, or for passing lists as an argument to function calls, or for creating lists inside of object literals. You can access a list's length using the &lt;code&gt;length&lt;/code&gt; property: &lt;code&gt;x = 1, 2, 3, 4, 5; x.length # 5&lt;/code&gt;. If a list is returned from an expression (it's the last value evaluated, or it's explicitly returned using a return statement), it will be executed as a block in Rant.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;object&lt;/strong&gt; types are key/value objects, like in Javascript. And similarly to Javascript, the syntax is JSON. &lt;em&gt;Not&lt;/em&gt; Javascript object syntax, but JSON. That means all key names must be either strings or just bare text (i.e. &lt;code&gt;{test: 2}&lt;/code&gt;). You can access an object's property via dot syntax (&lt;code&gt;{"test":2}.test&lt;/code&gt;) or via bracket accessor syntax (&lt;code&gt;{"test":2}["test"]&lt;/code&gt;). You can also set object properties the same way i.e. &lt;code&gt;x = {"test":2}; x.test = 3; x["test"] = 4&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;function&lt;/strong&gt; types are, well, functions. There are two ways to define them: using a C-like syntax - &lt;code&gt;x = function(a, b) { a + b };&lt;/code&gt; - or using a lambda syntax - &lt;code&gt;x = (a, b) =&amp;gt; a + b;&lt;/code&gt; Function calls are the same as every other language: &lt;code&gt;x(2, 3)&lt;/code&gt;. You can return things from them using a &lt;code&gt;return&lt;/code&gt; statement, just like every other language, though it'll return the last value evaluated in the function if there's no return statement. You can also &lt;code&gt;return&lt;/code&gt; from any other statement in Richard, which will end the expression and return the value to the Rant pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;pattern string&lt;/strong&gt; types are like strings, but they can be executed as Rant patterns. It is declared using a dollar sign in front of a string: &lt;code&gt;$"&amp;lt;noun&amp;gt;"&lt;/code&gt;. They can be executed two ways: using a function call - &lt;code&gt;$"&amp;lt;noun&amp;gt;"()&lt;/code&gt; - or by being returned from an expression. You can use a concatenation operator like strings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;no&lt;/strong&gt; is a null value. This means that it is a value that has been &lt;em&gt;explicitly&lt;/em&gt; set to null. It's a constant: &lt;code&gt;x = no&lt;/code&gt;. Why &lt;code&gt;no&lt;/code&gt; instead of null? It's funny.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;undefined&lt;/strong&gt; is a value that hasn't been set yet. In Richard, this type is identified by the constant &lt;code&gt;???&lt;/code&gt; - that is, if you set something to undefined (why?), it would look like this: &lt;code&gt;x = ???&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Statements&lt;/h3&gt;
&lt;p&gt;There are a few control flow statements in Richard.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;if&lt;/strong&gt; statements, along with their companion &lt;strong&gt;else&lt;/strong&gt; statements, are a way of conditionally executing a specified block of code. You use them like you do in any other language:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;It&amp;#39;s true!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;This should never happen.&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;while&lt;/strong&gt; statements are, again, the same as they are in every language since C:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Convert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;for&lt;/strong&gt; statements are different! They're actually &lt;code&gt;for..in&lt;/code&gt; statements, like in Javascript. The reasoning is that there are very few times that you ever need to use a for loop in a way that's not just iterating over something from beginning to end, and if you want to do that, you can use a while loop.&lt;/p&gt;
&lt;p&gt;You can use a &lt;code&gt;for..in&lt;/code&gt; loop to iterate over lists or objects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;this&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;is&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;key1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;key2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;another string&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can tell, the key is returned, not the object. For arrays, this will be the index.&lt;/p&gt;
&lt;p&gt;You can &lt;code&gt;break&lt;/code&gt; out of both kinds of loops.&lt;/p&gt;
&lt;h2&gt;Standard Library&lt;/h2&gt;
&lt;p&gt;Richard currently doesn't have a very robust standard library, though we'll be adding to it constantly.&lt;/p&gt;
&lt;p&gt;For now, there's two types of standard library functions: properties and global objects. Properties are created on a specific type of object, and can be used on any type of that object. For example, &lt;code&gt;string&lt;/code&gt; types have a &lt;code&gt;length&lt;/code&gt; property, and &lt;code&gt;list&lt;/code&gt; types have a &lt;code&gt;last&lt;/code&gt; property. Global objects are global Richard key/value objects which have properties of their own. For example, there's a &lt;code&gt;Math&lt;/code&gt; global object, which has a property &lt;code&gt;PI&lt;/code&gt; which returns the mathematical constant Pi. It also has functions like &lt;code&gt;sin&lt;/code&gt; and &lt;code&gt;atan2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There isn't documentation for the standard library yet (I haven't written the extension for Constitution), but every function has tests, and you can take a look at those.&lt;/p&gt;
&lt;h2&gt;Sample Program&lt;/h2&gt;
&lt;p&gt;I'm too lazy to write my own sample program, but here's one Berkin wrote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
          &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;~=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;~=&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's an implementation of some Linq-inspired features in Richard. I'll probably add some of these (where / filter, map / select, reduce, etc) into the Richard standard library before release.&lt;/p&gt;
&lt;h2&gt;In Conclusion&lt;/h2&gt;
&lt;p&gt;Richard is currently really buggy, but it's still usable! If you find any bugs, please add a test for it! We're especially concerned about "white" exceptions, i.e. exceptions that aren't RantRuntimeExceptions or RantCompilerExceptions.&lt;/p&gt;</summary><category term="programming"></category><category term="rant"></category></entry><entry><title>PSA: Node.js NPM Visual Studio Error</title><link href="/psa-node-error.html" rel="alternate"></link><updated>2014-07-28T22:03:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2014-07-28:psa-node-error.html</id><summary type="html">&lt;p&gt;If you are, like me, developing on Windows, and you, like me, have multiple versions of Visual Studio installed, you might see this error when a Node.js package needs to build something:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\V120\Microsoft.Cpp.Platform.targets(64,5): error MSB8020: The build tools for Visual Studio 2010 (Platform Toolset = &amp;#39;v100&amp;#39;) cannot be found. To build using the v100 build tools, please install Visual Studio 2010 build tools.  Alternatively, you may upgrade to the current Visual Studio tools by selecting the Project menu or right-click the solution, and then selecting &amp;quot;Upgrade Solution...&amp;quot;. [C:\wamp\node\spotify\node_modules\spotify-web\node_modules\ws\build\bufferutil.vcxproj]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is an annoying and unfortunately common error for me when installing packages through NPM. After scouring the internet, it turns out that this is an error with gyp, meaning that neither the NPM or node-gyp folks can fix it. However, you can pass a command line parameter to npm to specify what version to build with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;npm install spotify-web -msvs_version=2013
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This parameter specifies what version of Visual Studio the library should build with. You can use any version, but I prefer the latest (2013).&lt;/p&gt;</summary><category term="programming"></category></entry><entry><title>OS Dev Part 3: Writing Text</title><link href="/osdev-screen.html" rel="alternate"></link><updated>2014-05-24T02:30:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2014-05-24:osdev-screen.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;This series has been discontinued in favor of the far superior &lt;a href="http://littleosbook.github.io/"&gt;Little OS Book&lt;/a&gt;. Take a look at that one if you want to develop an operating system!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now that we've set up the environment, the first step is writing text to the screen. This might seem odd - shouldn't we cover all the important bits first? Normally, you'd be right. You shouldn't write your UI first and your backend later. But since there's no way to log to the console in OS development, having a print function available as soon as possible can make things much less painful. Writing to the screen is also pretty straightforward. It's doing it right that gets complicated. Buckle up, this is going to be long.&lt;/p&gt;
&lt;h2&gt;Real Mode and Protected Mode&lt;/h2&gt;
&lt;p&gt;When your computer starts the operating system, it starts it in something called "real mode." This was the original mode that x86 processors ran in, but it's very limited. It's 16-bit, there's only 1MB of RAM available, and it's missing a lot of the "real" operating system features. However, since the Intel 80286 chip, we've had protected mode. This means that, not only do we have full, native access to RAM in 32-bit, we also have memory protection features. This means that you can set it up so that programs can only access the RAM they're given - essential to a real operating system. We'll be covering this later. While operating systems &lt;em&gt;have&lt;/em&gt; been written in real mode (MS-DOS, for one), it's not a fun experience. Thankfully, because we're using GRUB, we don't have to worry about it. GRUB launches us in protected mode (32-bit and full feature) already.&lt;/p&gt;
&lt;p&gt;However, since we're in protected mode, we can't use any of the useful BIOS interrupts. Interrupts are what you use to tell a lower level component to do something - applications use interrupts to perform calls to the operating system, and the operating system (in real mode) uses interrupts to talk to the BIOS. But since we're in protected mode, we can't do this. This doesn't really make it more difficult (though it does, thankfully, save us from writing a bunch of assembly), but it might look different than some other "hello world" tutorials you've seen.&lt;/p&gt;
&lt;h2&gt;Printing Without Interrupts&lt;/h2&gt;
&lt;p&gt;To write to the screen, we'll be writing directly to video memory. Don't worry, pointers make this simple. However, there is one function that's necessary to the console that we can't do just by writing to memory: moving the cursor. To move the cursor, we have to write directly to the VGA controller. To do this, we use the &lt;code&gt;outb&lt;/code&gt; assembly instruction. This tells the CPU to write a value at a certain port we provide to it. The port we're writing to will let us change the cursor position. &lt;/p&gt;
&lt;p&gt;Both the &lt;code&gt;outb&lt;/code&gt; and &lt;code&gt;inb&lt;/code&gt; instructions (writing out to a port and receiving from a port) are going to be implemented in inline assembly (because that seems to be the only way people do it, and I don't want to be unnecessarily confusing.) If you don't know, inline assembly is a certain syntax for writing assembly inside C and C++. It's ugly and unintelligible, but sometimes it's necessary. Create two new files:&lt;/p&gt;
&lt;h4&gt;util.c&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;quot;util.h&amp;quot;&lt;/span&gt;

&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="nf"&gt;kutil_inportb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;asm&lt;/span&gt; &lt;span class="k"&gt;volatile&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;inb %%dx,%%al&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;=a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;kutil_outportb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;asm&lt;/span&gt; &lt;span class="k"&gt;volatile&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;outb %%al,%%dx&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;util.h&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#ifndef INLINE_UTIL_H&lt;/span&gt;
&lt;span class="cp"&gt;#define INLINE_UTIL_H&lt;/span&gt;

&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="nf"&gt;kutil_inportb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;kutil_outportb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we define the two functions - &lt;code&gt;kutil_inportb&lt;/code&gt; for &lt;code&gt;inb&lt;/code&gt; and &lt;code&gt;kutil_outportb&lt;/code&gt; for &lt;code&gt;outb&lt;/code&gt;, and write a header file for them. This will allow us to include these functions in other files in this kernel. It includes a "header guard," which is a way to make sure the file doesn't get included multiple times (which can lead to problems). Also notice how our functions are prefixed with &lt;code&gt;kutil&lt;/code&gt;. All our kernel functions will be prefixed like this, with the "k" denoting that it's a kernel function and the part after to show which file it comes from. This makes it easy to tell which functions are kernel functions (and should not be used outside of the kernel, once we get to programs), and what file to look for them in if we need to debug it.&lt;/p&gt;
&lt;h3&gt;libhstd&lt;/h3&gt;
&lt;p&gt;In the course of writing this kernel, we are going to write a lot of stuff that isn't specific to the kernel (that is, we can safely use it in programs on the OS). Because of this, we'll be putting these functions in a library named libhstd - the Helios standard library. Create a directory named &lt;code&gt;lib&lt;/code&gt; in your &lt;code&gt;src&lt;/code&gt; folder, and another one named &lt;code&gt;hstd&lt;/code&gt; in that. Create a Makefile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;OBJS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;memory.o string.o
&lt;span class="nv"&gt;CC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;i386-elf-g++
&lt;span class="nv"&gt;LD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;i386-elf-ld
&lt;span class="nv"&gt;AR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;i386-elf-ar

&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hstd&lt;/span&gt;

&lt;span class="nf"&gt;hstd&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;OBJS&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;AR&lt;span class="k"&gt;)&lt;/span&gt; rcs libhstd.a &lt;span class="k"&gt;$(&lt;/span&gt;OBJS&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;%.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;c&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; -ffreestanding -O2 -Wall -Wextra -fno-exceptions -fpermissive -fno-rtti -c &lt;span class="nv"&gt;$&amp;lt;&lt;/span&gt;

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    rm -rf *.o
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First, you might notice that we're using the variable CC for compiler, LD for linker, etc. This is only to fit with convention, as I realized after I posted the last tutorial. Feel free to change the main Makefile to this convention, if you want, but you should be able to follow along just fine.&lt;/p&gt;
&lt;p&gt;Next, you might notice that this looks very similar to the Makefile for the OS, except for one key difference. After compiling the object files, we create an archive with the &lt;code&gt;ar&lt;/code&gt; command, which can then be linked with the kernel to allow it to access this library's functions. We also specify the objects as &lt;code&gt;memory.o&lt;/code&gt; and &lt;code&gt;string.o&lt;/code&gt;, which are the components of this library that we'll be writing today.&lt;/p&gt;
&lt;p&gt;First, we need a header file that won't be linked with anything. Since we're using g++ to compile this, we need to export our functions in a way that languages that aren't using C++ naming conventions (like C and assembly) can understand. To do this, we create the file &lt;code&gt;export.h&lt;/code&gt; in the &lt;code&gt;hstd&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define EXPORT extern &amp;quot;C&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We will include this file in every library header, so that we can make sure that our functions are named correctly when exported. Next, we'll create the memory portion of the library:&lt;/p&gt;
&lt;h4&gt;memory.c&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;quot;memory.h&amp;quot;&lt;/span&gt;

&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;memcpy&lt;/span&gt;
&lt;span class="cm"&gt;Copy count bytes from src to dest, and return dest.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="n"&gt;EXPORT&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;src_pointer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dest_pointer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(;&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dest_pointer&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;src_pointer&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;memset&lt;/span&gt;
&lt;span class="cm"&gt;Set count bytes in dest to val, and return dest.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="n"&gt;EXPORT&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dest_pointer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(;&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dest_pointer&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;memsetw&lt;/span&gt;
&lt;span class="cm"&gt;Set count bytes in dest to val, and return dest (but 16 bit this time).&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="n"&gt;EXPORT&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;memsetw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dest_pointer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(;&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dest_pointer&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;memory.h&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#ifndef HSTD_MEMORY_H&lt;/span&gt;
&lt;span class="cp"&gt;#define HSTD_MEMORY_H&lt;/span&gt;

&lt;span class="cp"&gt;#include &amp;quot;export.h&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;EXPORT&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;EXPORT&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;EXPORT&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;memsetw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, we define a few simple functions for copying and setting memory. &lt;code&gt;memcpy&lt;/code&gt; copies memory from one location to another. &lt;code&gt;memset&lt;/code&gt; and &lt;code&gt;memsetw&lt;/code&gt; set an entire block of memory to one value, though one takes a location as a char and the other takes the location as a short, respectively. Also notice that we use the EXPORT macro next to each definition.&lt;/p&gt;
&lt;p&gt;Next, there's the string portion. This has some more complicated stuff, plus one function that I "stole" (though it was public domain) because I couldn't for the life of me write a string reversal function that didn't segfault. Hurray for me.&lt;/p&gt;
&lt;h4&gt;string.c&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;quot;string.h&amp;quot;&lt;/span&gt;

&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;strlen&lt;/span&gt;
&lt;span class="cm"&gt;Measure length of str.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="n"&gt;EXPORT&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;strrev&lt;/span&gt;
&lt;span class="cm"&gt;Return a reversed representation of the string.&lt;/span&gt;
&lt;span class="cm"&gt;http://www8.cs.umu.se/~isak/snippets/strrev.c&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="n"&gt;EXPORT&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;strrev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;^=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;^=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;^=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Internally used for the next two functions&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;strtobase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0123456789ABCDEF&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// get each digit in the base we want it in - note that num % base returns the last digit, &lt;/span&gt;
        &lt;span class="c1"&gt;// which is why we have to reverse the string.&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;stribase&lt;/span&gt;
&lt;span class="cm"&gt;Return a string from the given integer in the given base (up to base 16) to output.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="n"&gt;EXPORT&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;stribase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;strtobase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strrev&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;stri&lt;/span&gt;
&lt;span class="cm"&gt;Return a string from the given integer to output.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="n"&gt;EXPORT&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;stri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;strtobase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strrev&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This defines a few functions that are going to be very useful to us. First, &lt;code&gt;strlen&lt;/code&gt; is obvious - it takes the length of a string by finding how many bytes are between the start and its null terminator (no, it doesn't work with unicode - but neither does the BIOS). &lt;code&gt;strrev&lt;/code&gt; takes a string and returns the reverse of it; pretty simple in concept, but I'm not really sure how this implementation works (but it works so hey). The last two are methods to convert a number to a string. The first one can convert a number to an arbitrary base between 1 and 16 (so, binary, decimal, octal, hexadecimal, etc), and the second one uses this function to provide an easier way to print numbers. &lt;/p&gt;
&lt;p&gt;Now we can amend our OS Makefile (the one in the src directory) to build this library when we build the kernel. Just add this target:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;libs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;cd &lt;/span&gt;lib/hstd &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; mv libhstd.a ../../
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will build the library and move the binary to the src directory. Next, change your &lt;code&gt;all&lt;/code&gt; target:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="n"&gt;libs&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;
    rm -rf *.o
    mv kernel.bin ../disk/files/boot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course, we're going to need to link this library with the kernel. So add this to the top of your makefile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;LIBS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;libhstd.a
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And change your &lt;code&gt;kernel&lt;/code&gt; target:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;LD&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="err"&gt;-T&lt;/span&gt; &lt;span class="err"&gt;link.ld&lt;/span&gt; &lt;span class="err"&gt;-o&lt;/span&gt; &lt;span class="err"&gt;kernel.bin&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;OBJS&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;LIBS&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;...and your &lt;code&gt;clean&lt;/code&gt; target, too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
    rm -rf &lt;span class="k"&gt;$(&lt;/span&gt;OBJS&lt;span class="k"&gt;)&lt;/span&gt;
    rm -rf &lt;span class="k"&gt;$(&lt;/span&gt;LIBS&lt;span class="k"&gt;)&lt;/span&gt;
    rm -rf ../disk/files/boot/kernel.bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Great! Now you're ready to...actually do what you came to this post to do. Isn't organization great?&lt;/p&gt;
&lt;h3&gt;Writing Text&lt;/h3&gt;
&lt;p&gt;Create a file in your &lt;code&gt;src&lt;/code&gt; directory named &lt;code&gt;screen.c&lt;/code&gt;. We'll start by defining a few variables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define VIDEO_MEM 0xb8000&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;cursor_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cursor_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These are the cursor X and Y values. By incrementing them and calling a function to change the cursor location, we can move positions. In fact, that's the function we're going to write next:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;kscrn_move_cursor&lt;/span&gt;
&lt;span class="cm"&gt;Move the hardware cursor to x, y.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;kscrn_move_cursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;    Since this is protected mode, we can&amp;#39;t use a BIOS interrupt to move the cursor.&lt;/span&gt;
&lt;span class="cm"&gt;    Instead, we tell the VGA controller directly.&lt;/span&gt;
&lt;span class="cm"&gt;    */&lt;/span&gt;
    &lt;span class="n"&gt;kutil_outportb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x3d4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;kutil_outportb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x3d5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;kutil_outportb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x3d4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;kutil_outportb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x3d5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;cursor_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cursor_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember when I mentioned the VGA controller? Here, we write the position of the cursor (in characters - x + y * 80 is the amount of characters from 0 that the cursor is at) to the VGA controller. This will move our cursor position.&lt;/p&gt;
&lt;p&gt;Now it's time to go over how we're going to write to the screen. At the location 0xB8000 (&lt;code&gt;VIDEO_MEM&lt;/code&gt;) is located the video RAM. In text mode (which we're in, by default), this is 80 by 25 by 2 bytes in size - 80 columns, 25 rows, and 2 bytes per character (one byte is the character, one byte is the color). Knowing this, we can write a simple "write character" function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;kscrn_write_char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;VIDEO_MEM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// navigate to cursor position&lt;/span&gt;
    &lt;span class="n"&gt;video&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;cursor_x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;cursor_y&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mh"&gt;0x07&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cursor_x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;kscrn_move_cursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cursor_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cursor_y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, we create a pointer to the video memory, navigate to the cursor position (by incrementing the pointer by our cursor position), and write the character to it. This function isn't perfect, but we'll get back to that in a second. First, what does &lt;code&gt;c | 0x07 &amp;lt;&amp;lt; 8&lt;/code&gt; mean? &lt;code&gt;c&lt;/code&gt; is our character, so what we're doing is creating a short from the character byte and the color (white on black). &lt;/p&gt;
&lt;p&gt;I mentioned this function isn't perfect, and it's not - far from it. It doesn't handle any special characters, or wrap around, or scroll. We can solve two of those three by updating the function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;kscrn_write_char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mh"&gt;0x08&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// backspace&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// decrease cursor_x by one; if end of line, go to previous line; if first line, don&amp;#39;t do anything&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cursor_x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;cursor_y&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;cursor_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;cursor_y&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cursor_x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cursor_x&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mh"&gt;0x09&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// tab&lt;/span&gt;
        &lt;span class="c1"&gt;// increase to a multiple of four i.e. the next tab stop&lt;/span&gt;
        &lt;span class="c1"&gt;// wondering how it works? don&amp;#39;t ask me, ask the guy who wrote bkerndev&lt;/span&gt;
        &lt;span class="n"&gt;cursor_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cursor_x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// carriage return&lt;/span&gt;
        &lt;span class="n"&gt;cursor_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// go to the start of the line&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// newline&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cursor_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// go to the start of the line (\r)&lt;/span&gt;
        &lt;span class="n"&gt;cursor_y&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// go to the next lien&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// space or higher; valid character&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;VIDEO_MEM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// navigate to cursor position&lt;/span&gt;
        &lt;span class="n"&gt;video&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;cursor_x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;cursor_y&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mh"&gt;0x07&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;cursor_x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cursor_x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// go to the next line if we&amp;#39;ve written past this one&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cursor_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;cursor_y&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;kscrn_move_cursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cursor_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cursor_y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;kscrn_scroll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, we handle several common special characters. We also set ourselves up for handling scrolling by calling the function &lt;code&gt;kscrn_scroll&lt;/code&gt;. This is a simple function. Since we're working with raw video memory, all we have to do is move the memory 80 * 2 * lines bytes up, and we've scrolled the console. Place this above &lt;code&gt;kscrn_write_char&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;kscrn_scroll&lt;/span&gt;
&lt;span class="cm"&gt;Move the window up a line if cursor_y &amp;gt; 25&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;kscrn_scroll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x20&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x07&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cursor_y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;VIDEO_MEM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// same as 25 - (cursor_y - 25 + 1) * 80 * 2&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cursor_y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;cursor_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;kscrn_move_cursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cursor_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cursor_y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we have to clear the screen. GRUB leaves some stuff on the screen after starting up, so we'll call this function as soon as we've started our kernel. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;kscrn_clear_screen&lt;/span&gt;
&lt;span class="cm"&gt;Wipe everything displayed on the screen.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;kscrn_clear_screen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;VIDEO_MEM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// set the video memory to blank&lt;/span&gt;
    &lt;span class="n"&gt;memsetw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;kscrn_move_cursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a very simple function; we just blank out the video memory and set the cursor position to zero. The final function we need to write right now is one of the most useful: writing strings!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;kscrn_write_string&lt;/span&gt;
&lt;span class="cm"&gt;Write a string to the screen.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;kscrn_write_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;kscrn_write_char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, this is a very simple function. We just iterate over the string and write every character. We just need to write the &lt;code&gt;screen.h&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#ifndef KERN_SCREEN_H&lt;/span&gt;
&lt;span class="cp"&gt;#define KERN_SCREEN_H&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;kscrn_clear_screen&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;kscrn_write_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;kscrn_write_char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;kscrn_scroll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;kscrn_move_cursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, all that's left to do is test it! Head over to &lt;code&gt;main.c&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;quot;screen.h&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;quot;lib/hstd/string.h&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C&amp;quot;&lt;/span&gt; 
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;kscrn_clear_screen&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;kscrn_write_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;239 in hex: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;stribase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;239&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;kscrn_write_string&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;kscrn_write_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;239 in decimal: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;stri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;239&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;kscrn_write_string&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buf2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, we write the number 239 in hex and decimal. On screen, you should see two lines: "239 in hex: EF" and "239 in decimal: 239". If you see these, good job! If you don't leave a comment and I can try to help.&lt;/p&gt;
&lt;p&gt;Next up is the boring part: the GDT. This is part of the memory protection that protected mode offers, and we can't get much farther without it. Don't worry, eventually you'll have something cool to look at!&lt;/p&gt;
&lt;p&gt;As before, the code is available on &lt;a href="https://github.com/cpancake/helios/tree/tut-3"&gt;GitHub&lt;/a&gt;. And if you're fed up with waiting for me to write another part, just check out some of the cool articles over at &lt;a href="http://osdev.org/"&gt;osdev.org&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Lastly, I should credit &lt;a href="http://www.osdever.net/bkerndev/Docs/title.htm"&gt;bkerndev&lt;/a&gt;, a kernel development tutorial simiar to this one (if a bit outdated). Though the code so far has been a mish-mash of many sources, the screen functions were mostly taken from here. Hey, everyone else does it.&lt;/p&gt;</summary><category term="programming"></category><category term="osdev"></category></entry><entry><title>OS Dev Environment Setup</title><link href="/osdev-environment.html" rel="alternate"></link><updated>2014-05-22T21:07:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2014-05-22:osdev-environment.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;This series has been discontinued in favor of the far superior &lt;a href="http://littleosbook.github.io/"&gt;Little OS Book&lt;/a&gt;. Take a look at that one if you want to develop an operating system!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/osdev-gcc.html"&gt;Last post&lt;/a&gt;, I showed you how to cross-compile GCC for operating system development. Today, I'm going to get you all set up to write your own operating system, from scratch. We're going to be calling this example operating system "Helios", because it ends with OS.&lt;/p&gt;
&lt;h2&gt;Preparation&lt;/h2&gt;
&lt;p&gt;The most important tool here that you don't already have is &lt;a href="http://nasm.us/"&gt;NASM&lt;/a&gt;. NASM, or the Netwide Assembler, is key to operating system development. You can't write an operating system without writing some Assembly, and there's no better assembler than NASM. Download and install NASM (I recommend the installer, but you can do whatever as long as you put it in the PATH). &lt;/p&gt;
&lt;p&gt;Another tool you're going to need is &lt;code&gt;mkisofs&lt;/code&gt;. This is a tool to make ISOs from binaries, and it's going to be used to generate the ISO we'll emulate from. You can install it from the Cygwin installer (you can just run it again and select other packages, it won't do any harm), or find one of the many unofficial Windows ports online. &lt;/p&gt;
&lt;p&gt;The final tool you'll need is the emulator to test this. I recommend &lt;a href="http://bochs.sourceforge.net/"&gt;Bochs&lt;/a&gt;, and it's what I'll be using for the duration of this project. Download and run the installer, and then add the Bochs installation directory to your path (so that typing in &lt;code&gt;bochs&lt;/code&gt; launches the emulator; if you don't know how to do this, just leave a comment).&lt;/p&gt;
&lt;p&gt;Now, create a directory to hold your project. I suggest having two folders inside - &lt;code&gt;disk&lt;/code&gt; and &lt;code&gt;src&lt;/code&gt;. Then, in the root of this folder, place a file called .bochsrc with the following in it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ata0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ioaddr1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x1f0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ioaddr2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x3f0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;irq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;
&lt;span class="n"&gt;ata0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cdrom&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;disk/helios.iso&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;inserted&lt;/span&gt;
&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cdrom&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This file, when you launch bochs, will tell it to create a virtual CD drive from the ISO of our operating system, and to boot from it. This is vital.&lt;/p&gt;
&lt;h2&gt;Basic OS&lt;/h2&gt;
&lt;p&gt;This is an OS down to its simplest form. This will tell you if your setup works. In the src directory, create the file &lt;code&gt;boot.asm&lt;/code&gt;, with the following contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;; Kernel&amp;#39;s entry point. &lt;/span&gt;
&lt;span class="c1"&gt;; This is what GRUB calls when it hands control to the OS&lt;/span&gt;
&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="k"&gt;BITS&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt;
&lt;span class="nl"&gt;start:&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;esp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;_sys_stack&lt;/span&gt; &lt;span class="c1"&gt;; Set the stack pointer to point to the top of our stack.&lt;/span&gt;
    &lt;span class="nf"&gt;jmp&lt;/span&gt; &lt;span class="nv"&gt;stublet&lt;/span&gt;

&lt;span class="c1"&gt;; The multiboot header. GRUB looks for this before it boots the OS.&lt;/span&gt;
&lt;span class="k"&gt;ALIGN&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="nl"&gt;mboot:&lt;/span&gt;
    &lt;span class="no"&gt;MULTIBOOT_PAGE_ALIGN&lt;/span&gt;&lt;span class="kd"&gt;    equ&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="no"&gt;MULTIBOOT_MEMORY_INFO&lt;/span&gt;&lt;span class="kd"&gt;   equ&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="no"&gt;MULTIBOOT_HEADER_MAGIC&lt;/span&gt;&lt;span class="kd"&gt;  equ&lt;/span&gt; &lt;span class="mh"&gt;0x1BADB002&lt;/span&gt;
    &lt;span class="no"&gt;MULTIBOOT_HEADER_FLAGS&lt;/span&gt;&lt;span class="kd"&gt;  equ&lt;/span&gt; &lt;span class="nv"&gt;MULTIBOOT_PAGE_ALIGN&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;MULTIBOOT_MEMORY_INFO&lt;/span&gt;
    &lt;span class="no"&gt;MULTIBOOT_CHECKSUM&lt;/span&gt;&lt;span class="kd"&gt;  equ&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;MULTIBOOT_HEADER_MAGIC&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;MULTIBOOT_HEADER_FLAGS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;dd&lt;/span&gt; &lt;span class="nv"&gt;MULTIBOOT_HEADER_MAGIC&lt;/span&gt;
    &lt;span class="kd"&gt;dd&lt;/span&gt; &lt;span class="nv"&gt;MULTIBOOT_HEADER_FLAGS&lt;/span&gt;
    &lt;span class="kd"&gt;dd&lt;/span&gt; &lt;span class="nv"&gt;MULTIBOOT_CHECKSUM&lt;/span&gt;

&lt;span class="c1"&gt;; Call the kernel, then enter an infinite loop.&lt;/span&gt;
&lt;span class="nl"&gt;stublet:&lt;/span&gt;
    &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="nv"&gt;kernel&lt;/span&gt;
    &lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="nv"&gt;kernel&lt;/span&gt;
    &lt;span class="nf"&gt;jmp&lt;/span&gt; &lt;span class="kc"&gt;$&lt;/span&gt; &lt;span class="c1"&gt;; Infinite loop&lt;/span&gt;

&lt;span class="k"&gt;SECTION&lt;/span&gt; &lt;span class="nv"&gt;.bss&lt;/span&gt;
    &lt;span class="kd"&gt;resb&lt;/span&gt; &lt;span class="mi"&gt;8192&lt;/span&gt;
&lt;span class="nl"&gt;_sys_stack:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Theres a few comments in this file, but most of it is GRUB specific stuff. Basically, we're telling GRUB "Hey, we're an operating system, feel free to boot us!" It also initializes the stack and points the stack pointer to it, and calls our kernel. But where is this kernel defined? We use an &lt;code&gt;extern&lt;/code&gt; statement to tell the compiler that it shouldn't complain when it doesn't exist. Then, we define the &lt;code&gt;kernel&lt;/code&gt; function in a C file. Name it &lt;code&gt;main.c&lt;/code&gt; and put this in it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C&amp;quot;&lt;/span&gt; 
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mh"&gt;0xDEADBEEF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This just returns "DEADBEEF" when called. You'll see why when we run it. But why the &lt;code&gt;extern&lt;/code&gt; statement here? Technically, we're using G++ for this, which &lt;a href="http://en.wikipedia.org/wiki/Name_mangling"&gt;mangles&lt;/a&gt; the names of its functions when compiled. To be able to call this from assembly reliably, we have to tell G++ that it's a C function and shouldn't be messed with. Keep in mind that, even though we're writing this in C, you don't have access to &lt;em&gt;any&lt;/em&gt; of the C standard library. We'll need to implement everything ourselves. &lt;/p&gt;
&lt;h2&gt;Compiling&lt;/h2&gt;
&lt;p&gt;We're going to use Makefiles to compile this, because they're really useful and are much less ugly than batch files. First, create a Makefile in the src directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;OBJS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;main.o boot.o
&lt;span class="nv"&gt;OUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;kernel.bin

&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;
    rm -rf *.o
    mv kernel.bin ../disk/files/boot

&lt;span class="nf"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;OBJS&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;%.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;asm&lt;/span&gt;
    nasm -felf &lt;span class="nv"&gt;$&amp;lt;&lt;/span&gt; -o &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;%.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;c&lt;/span&gt;
    i386-elf-g++ -ffreestanding -O2 -Wall -Wextra -fno-exceptions -fno-rtti -c &lt;span class="nv"&gt;$&amp;lt;&lt;/span&gt;

&lt;span class="nf"&gt;kernel&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
    i386-elf-ld -T link.ld -o kernel.bin &lt;span class="k"&gt;$(&lt;/span&gt;OBJS&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
    rm -rf &lt;span class="k"&gt;$(&lt;/span&gt;OBJS&lt;span class="k"&gt;)&lt;/span&gt;
    rm -rf ../disk/files/boot/kernel.bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you don't understand this, you should probably read up on how Makefiles work (because they're &lt;em&gt;really&lt;/em&gt; useful), but it's actually pretty simple. We define what objects we need compied (main.o and boot.o), how to compile them based on the source file (main.c is compiled with G++, while boot.asm is compiled with NASM), and then we tell it how to link them together and create a binary for our operating system. We can also run &lt;code&gt;make clean&lt;/code&gt; to delete all the binaries we've already compiled and start fresh.&lt;/p&gt;
&lt;h2&gt;GRUB and ISOs&lt;/h2&gt;
&lt;p&gt;This Makefile isn't complete yet, however. First, the directory &lt;code&gt;../disk/files/boot&lt;/code&gt; doesn't exist yet. Second, there's no way to create the ISO. We'll solve these together. First, you'll need to create the directory &lt;code&gt;files&lt;/code&gt; inside &lt;code&gt;disk&lt;/code&gt;, &lt;code&gt;boot&lt;/code&gt; inside of that, and &lt;code&gt;grub&lt;/code&gt; inside of that. Then, place the file &lt;code&gt;menu.lst&lt;/code&gt; in the &lt;code&gt;grub&lt;/code&gt; directory, and put this in it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;default 0

title Helios
kernel /boot/kernel.bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will tell GRUB which operating system to start. We tell it to start /boot/kernel.bin, because the root of our ISO is going to be &lt;code&gt;disk/files&lt;/code&gt;, and kernel.bin will be in the &lt;code&gt;boot&lt;/code&gt; directory. You'll also need to put &lt;a href="https://code.google.com/p/arabos/downloads/detail?name=stage2_eltorito"&gt;this&lt;/a&gt; file in the &lt;code&gt;grub&lt;/code&gt; directory. This is GRUB itself, and we will use it to create the ISO.&lt;/p&gt;
&lt;p&gt;Now, remember how we installed &lt;code&gt;mkisofs&lt;/code&gt; back in the beginning? Here's why. Add this to the end of your Makefile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;iso&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    mkisofs -R -b boot/grub/stage2_eltorito -no-emul-boot &lt;span class="se"&gt;\&lt;/span&gt;
            -boot-load-size &lt;span class="m"&gt;4&lt;/span&gt; -boot-info-table -V HELIOS &lt;span class="se"&gt;\&lt;/span&gt;
            -quiet -o ../disk/helios.iso ../disk/files
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This can be broken down into its arguments. &lt;code&gt;-R&lt;/code&gt; tells &lt;code&gt;mkisofs&lt;/code&gt; to create the ISO with &lt;a href="http://en.wikipedia.org/wiki/Rock_Ridge"&gt;Rock Ridge&lt;/a&gt; directory information; &lt;code&gt;-b&lt;/code&gt; tells it to boot from &lt;code&gt;stage2_eltorito&lt;/code&gt; (which is GRUB); &lt;code&gt;-no-emul-boot&lt;/code&gt; tells it to boot from the GRUB image we provided; &lt;code&gt;-boot-load-size 4&lt;/code&gt; tells it that the BIOS should load 2048 bytes of the ISO when booting from it (four 512-byte sectors); &lt;code&gt;-boot-info-table&lt;/code&gt; tells GRUB a little bit about the ISO it's booting; &lt;code&gt;-V HELIOS&lt;/code&gt; sets the label of the ISO to &lt;code&gt;HELIOS&lt;/code&gt;, &lt;code&gt;-quiet&lt;/code&gt; tells it not to say anything unless something goes wrong; &lt;code&gt;-o ../disk/helios.iso&lt;/code&gt; tells it where to output the ISO, and &lt;code&gt;../disk/files&lt;/code&gt; tells it to make the ISO from the files contained there. Now, when you run &lt;code&gt;make iso&lt;/code&gt;, an ISO will be created in &lt;code&gt;disk&lt;/code&gt;. Are we done? Not quite.&lt;/p&gt;
&lt;h2&gt;Bringing It All Together&lt;/h2&gt;
&lt;p&gt;We'll also create a Makefile in the root of our directory to help automate the process. Here's what's contained in mine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;

&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
    &lt;span class="nb"&gt;cd &lt;/span&gt;src &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make iso &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ..

&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
    bochs -f .bochsrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's simple and short. When you run &lt;code&gt;make&lt;/code&gt; in the root directory, it will build and run your operating system. If you only need to run it, you can use &lt;code&gt;make run&lt;/code&gt;. If you only need to build it, you can use &lt;code&gt;make build&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You'll also need to create a file called &lt;code&gt;link.ld&lt;/code&gt; in the &lt;code&gt;src&lt;/code&gt; directory. This will tell &lt;code&gt;ld&lt;/code&gt; how to link the kernel together:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ENTRY(start)
phys = 0x00100000;
SECTIONS
{
  .text phys : AT(phys) {
    code = .;
    *(.text)
    *(.rodata)
    . = ALIGN(4096);
  }
  .data : AT(phys + (data - code))
  {
    data = .;
    *(.data)
    . = ALIGN(4096);
  }
  .bss : AT(phys + (bss - code))
  {
    bss = .;
    *(.bss)
    . = ALIGN(4096);
  }
  end = .;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, run the code via &lt;code&gt;make&lt;/code&gt; (make sure you're running &lt;code&gt;make&lt;/code&gt; via Cygwin). Press "start" in Bochs, press enter in GRUB, and then Bochs will hang. Don't worry, that's because we put in an infinite loop. Just press shutdown. The output console will display the registers when Bochs shutdown. Check the value of EAX, which is the return value of our C function. Is it &lt;code&gt;deadbeef&lt;/code&gt;? If so, good job, your code is working! If your code doesn't work, take a look at the code on &lt;a href="https://github.com/cpancake/helios/tree/tut-2"&gt;GitHub&lt;/a&gt; and see if you've done something wrong.&lt;/p&gt;
&lt;p&gt;That's it for this tutorial. Next time, we'll get into displaying stuff on screen and other important bits. From this point on, all the code is available on &lt;a href="http://github.com/cpancake/helios"&gt;GitHub&lt;/a&gt;, so watch that repository if you want an update when I publish a new post. Until next time!&lt;/p&gt;</summary><category term="programming"></category><category term="osdev"></category></entry><entry><title>Cross-compiling GCC for OS Development</title><link href="/osdev-gcc.html" rel="alternate"></link><updated>2014-05-22T17:47:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2014-05-22:osdev-gcc.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;This series has been discontinued in favor of the far superior &lt;a href="http://littleosbook.github.io/"&gt;Little OS Book&lt;/a&gt;. Take a look at that one if you want to develop an operating system!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I'm going to be writing some articles about operating system development, because it seems that most of the tutorials available are either outdated or incomplete. For the first part, I'm going to be going over how to compile your OS. This was adapted from the &lt;a href="http://wiki.osdev.org/GCC_Cross-Compiler"&gt;osdev.org&lt;/a&gt; guide.&lt;/p&gt;
&lt;p&gt;To compile an operating system, a linker is needed. The usual choice for this is GCC's linker, but it needs some work before you can use it for operating system development. That's because GCC, by default, compiles for the native operating system (Windows EXEs on Windows, Linux ELF files on Linux). To compile operating systems, we must recompile GCC for platform-less ELF files, like a kernel. This is simple, but it takes a while.&lt;/p&gt;
&lt;h2&gt;Preparation&lt;/h2&gt;
&lt;p&gt;First, if you're on Windows, you need to install Cygwin. It's likely possible to build GCC on normal Windows, but it's much easier to do it on Cygwin. &lt;a href="https://cygwin.com/install.html"&gt;Download&lt;/a&gt; and install Cygwin, and stop at the package installation screen. Make sure you install these packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gcc-core&lt;/li&gt;
&lt;li&gt;gcc-g++&lt;/li&gt;
&lt;li&gt;make&lt;/li&gt;
&lt;li&gt;bison&lt;/li&gt;
&lt;li&gt;flex&lt;/li&gt;
&lt;li&gt;gmp and libgmp-devel&lt;/li&gt;
&lt;li&gt;mpfr and libmpfr-devel&lt;/li&gt;
&lt;li&gt;mpclib and libmpc-devel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, you'll need to download the GCC sources. Download binutils &lt;a href="http://ftp.gnu.org/gnu/binutils/binutils-2.24.tar.gz"&gt;here&lt;/a&gt;, and gcc &lt;a href="http://ftp.gnu.org/gnu/gcc/gcc-4.9.0/gcc-4.9.0.tar.gz"&gt;here&lt;/a&gt;. Extract them to your Cygwin home folder (mine is &lt;code&gt;C:\cygwin64\home\Andrew&lt;/code&gt;, though you'll need to start up Cygwin once to create this directory). &lt;/p&gt;
&lt;h2&gt;Compiling&lt;/h2&gt;
&lt;p&gt;After you've installed Cygwin and downloaded the sources, &lt;code&gt;cd&lt;/code&gt; to your home directory. Then, you'll need to setup some environment variables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/opt/cross&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;TARGET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;i386-elf
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PREFIX&lt;/span&gt;&lt;span class="s2"&gt;/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;PREFIX&lt;/code&gt; defines the location that the compiled binaries will be installed. &lt;code&gt;TARGET&lt;/code&gt; defines the platform that you want to compile for - in this case, 32-bit ELF. We also add the installation directory to the &lt;code&gt;PATH&lt;/code&gt;, so that the compiled libraries will be available when we compile gcc.&lt;/p&gt;
&lt;h2&gt;binutils&lt;/h2&gt;
&lt;p&gt;First, we make a directory to install binutils into:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir build
&lt;span class="nb"&gt;cd &lt;/span&gt;build
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, we configure binutils.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;../binutils-2.24/configure --target&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$TARGET&lt;/span&gt; --prefix&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PREFIX&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; --disable-nls --disable-werror
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This should create a &lt;code&gt;Makefile&lt;/code&gt;. If it doesn't, leave a comment with the error or ask on StackOverflow.&lt;/p&gt;
&lt;p&gt;Next, we should compile and install binutils:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make
make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, clear the build directory so we can use it for GCC:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rm -rf *
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;gcc&lt;/h2&gt;
&lt;p&gt;Configure gcc the same way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;../gcc-4.9.0/configure --target&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$TARGET&lt;/span&gt; --prefix&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PREFIX&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; --disable-nls --enable-languages&lt;span class="o"&gt;=&lt;/span&gt;c,c++ --without-headers
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, we build gcc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make all-gcc
make all-target-libgcc
make install-gcc
make install-target-libgcc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You now have a cross-compiled GCC build. The binaries are in &lt;code&gt;~/opt/cross&lt;/code&gt;, which you can add to your Windows path so that you can use it without prefixing it with the directory.&lt;/p&gt;
&lt;p&gt;Next post I'll be covering how to setup an OS development environment and compile a simple kernel using GRUB.&lt;/p&gt;</summary><category term="programming"></category><category term="osdev"></category></entry></feed>