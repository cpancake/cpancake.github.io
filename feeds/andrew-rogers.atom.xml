<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>archived - Andrew Rogers</title><link href="/" rel="alternate"></link><link href="/feeds/andrew-rogers.atom.xml" rel="self"></link><id>/</id><updated>2017-10-21T13:29:00-04:00</updated><entry><title>HLDokan.NET</title><link href="/hldokan.html" rel="alternate"></link><published>2017-10-21T13:29:00-04:00</published><updated>2017-10-21T13:29:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:None,2017-10-21:/hldokan.html</id><summary type="html">&lt;p&gt;Mounts Source Engine VPK files as a virtual drive.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's a sequel to the &lt;a href="https://cpancake.me/source-map-analyzer.html"&gt;Source Map Analyzer&lt;/a&gt;. Actually, it's a prequel, because I wrote this almost a year ago. But it shares two things in common: it's a tool almost nobody will really need to use, and it was made for a dead mod.&lt;/p&gt;
&lt;p&gt;Obsidian Conflict is a neat HL2 mod that I played a bunch a long time ago. It's dead, and the developers have sorta abandoned it, so I've been making attempts to fix things about it. The Source Map Analyzer was a program to port maps from Obsidian Conflict to Garry's Mod to go with the &lt;a href="https://github.com/cpancake/oc"&gt;Garry's Mod Obsidian Conflict&lt;/a&gt; gamemode I created. But this was before any of that.&lt;/p&gt;
&lt;p&gt;You see, Obsidian Conflict can't mount any other games. For those of you who aren't in the know, many Obsidian Conflict maps use models and materials from other games, like Half-Life 2 Episode 2 or Counter-Strike Source. But Valve changed the way content is mounted in the Source Engine in some point in 2013 (the SteamPipe update). This killed mounting content in Obisidian Conflict.&lt;/p&gt;
&lt;p&gt;There's a solution you can do, which involves copying all the content from the games you want to mount to a certain folder in the Source SDK folder. It works, but it means you now have a duplicate copy of all the content in that game. That's no good.&lt;/p&gt;
&lt;p&gt;Instead, what if you just symlinked the same folder directly to the content within the package files? These packages, called VPKs, contain most or all of the data for Source Engine games, and if you could mount these packages as a virtual drive, you could symlink from the drive to the Source SDK folder, tricking Obsidian Conflict into mounting SourcePipe games.&lt;/p&gt;
&lt;p&gt;Unfortunately, it doesn't work. It mounts, sure, but for some reason files read correctly in some programs (like text editors), but not in others (like VLC or, importantly, the Source Engine). I think it has something to do with the way content is streamed in these programs, but I could never nail it down.&lt;/p&gt;
&lt;p&gt;You can still copy files from it, so if you're looking for a better way of browsing VPK files than GCFscape, maybe give this a shot.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/cpancake/HLDokan.NET"&gt;View source code.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="programming"></category></entry><entry><title>Source Map Analyzer</title><link href="/source-map-analyzer.html" rel="alternate"></link><published>2017-08-09T05:04:00-04:00</published><updated>2017-08-09T05:04:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:None,2017-08-09:/source-map-analyzer.html</id><summary type="html">&lt;p&gt;A tool for taking Source maps, VPK files, and the proper FGDs, and outputting a report on what you need to do to get it to work.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let me paint you a word picture: you really love this Half-Life 2 mod with all sorts of original maps that are fun to play. But nobody plays this mod anymore! And for a whole bunch of reasons, you just can't get your friends together to play this dead mod. So what do you do?&lt;/p&gt;
&lt;p&gt;You port it to a mod that people do play, of course! I'm working on that - &lt;a href="https://github.com/cpancake/oc"&gt;you can see my progress here&lt;/a&gt;. At some point in this process, you need to take a map from this dead mod and move it to your living one. You want to know what resources this map uses (so you can copy just those and not the rest of the junk in that folder), and you want to know what entities the map uses that aren't in the mod you're porting it to, so you know what you need to add to be able to play it.&lt;/p&gt;
&lt;p&gt;I know this isn't a situation many people find themselves in. It's probably not a situation you've found yourself in. I'm probably one of the few people who have ever had a need for this tool, frankly. But if, at some point, someone out there says "I wish I was able to take maps from this dead mod and move it to another mod," I've got good news for them.&lt;/p&gt;
&lt;h2&gt;The Source Map Analyzer&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Cliperizer" src="/images/source-map-analyzer.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/cpancake/SourceMapAnalyzer/releases"&gt;View releases.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cpancake/SourceMapAnalyzer"&gt;View source code.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I started work on this a while ago, around the start of the year. Just recently I decided it'd be nice if I put a GUI on it and released it for people to use. &lt;/p&gt;
&lt;p&gt;Here's what this tool does: first, you input one or more FGDs that define the mod you're porting to (the "base" FGDs). This could include, for example, the Half-Life 2 multiplayer FGD and the Garry's Mod FGD. Then, you input the VPKs that include all the content that can be mounted in the game you're porting to. This would probably include Half-Life 2, Episode 1 and 2, and maybe Counter-Strike Source. Next, you input the maps you want to process. Last, you input the game FGD (the one you're porting from), and the game directory (of the game you're porting from). This is the directory that includes the "models" and "materials" folders. Click "Process" to start the analyzing. &lt;/p&gt;
&lt;p&gt;Once it's done, it'll output a report in the folder containing the exe, the filename of which will be the filename of the map. If you leave the "Package" checkbox checked, it will also copy over whatever content that's used in the map that's not used in the VPK into a folder of the same name. The report it generates looks something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-- RESOURCES USED --
    materials/lostcoast/monastery/monastery_exterior001c
    materials/lostcoast/monastery/monastery_wall001a
    materials/lostcoast/monastery/monastery_wall001b
    materials/lostcoast/monastery/monastery_wall002b
    materials/lostcoast/monastery/monastery_wall002c
    materials/lostcoast/monastery/monastery_wall003a
    materials/lostcoast/monastery/monastery_wall003b
    materials/lostcoast/monastery/monastery_wall003c
    materials/maps/cleanup/ceilingtilea
    materials/maps/seamus/seamussand
    materials/plaster/plasterwall034d_nobump
    materials/tysn/tysn_beksinski_1
    sound/tysn/tysn_ringing_1
    sound/tysn/tysn_weirdface_1_sound
    sound/tysn/tysndoorpound1
-- UNIQUE ENTITIES --
    game_lives_manager
    game_text_quick
    item_box_sniper_rounds
    trigger_multiple_oc
    trigger_once_oc
    weapon_scripted
    weapon_sniperrifle
    weapon_uzi
-- DIFFERENT ENTITIES --
    info_player_start
    npc_fastzombie
    npc_headcrab
    npc_headcrab_black
    npc_headcrab_fast
    npc_poisonzombie
    npc_zombie
    point_teleport
    trigger_hurt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, the "unique entities" section contains entities that aren't present in the base FGD, and the "different entities" section contains entities that are present in the base FGD, but have different properties in the game FGD. &lt;/p&gt;</content><category term="projects"></category></entry><entry><title>ImageTool</title><link href="/image-tool.html" rel="alternate"></link><published>2017-06-26T19:55:00-04:00</published><updated>2017-06-26T19:55:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:None,2017-06-26:/image-tool.html</id><summary type="html">&lt;p&gt;Tool for sorting images and comics.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's happened again - I've made a tool for image organization. This tool is actually the oldest of the bunch - I don't know how far back this current version goes (at least a year), but this tool itself is a rewrite of an older one I made in 2013. To be frank, I don't know for sure how old this is.&lt;/p&gt;
&lt;p&gt;This time, it's a tool for sorting things - specifically images, though it has rudimentary sorting abilities for folders of images (which I've called "comics," because I don't see anyone using it for something different). It gives you the ability to select a folder and decide which images you want to keep and which images you want to discard, quickly and easily.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/cpancake/ImageTool/releases"&gt;View releases.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cpancake/ImageTool"&gt;View source code.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ImageTool is written in C# and uses VLC for displaying MP4s and WebMs (which, being used as replacements for animated GIFs, sometimes end up alongside images). I know it works on Windows, you'll have to find out yourself if it works on Mono (I'm not confident).&lt;/p&gt;
&lt;p&gt;When you launch the tool, it'll open up a list of all your current sorting projects. These projects are stored in &lt;code&gt;%APPDATA%\imagetool&lt;/code&gt;, and contain all the information about which images you've chosen to keep. To start sorting a folder, click the plus button in the bottom left - this will open up the "New Sort Project" window, where you can choose the directory, the name of the project, and the type. "Images" will sort individual images in the folder, while "Comics" will let you choose which folders of images to keep. These are not recursive (i.e. if you have &lt;code&gt;images/images2&lt;/code&gt; and you sort &lt;code&gt;images&lt;/code&gt;, the files in &lt;code&gt;images2&lt;/code&gt; won't be included).&lt;/p&gt;
&lt;p&gt;When you open up a project, you'll see a window with an image displayed prominently, and buttons along the bottom. "Yes" and "No" are your decisions on each file (you can press "W" and "S" respectively instead). "Open" opens the file in whatever your default image viewer is (shortcut is "O"). "Previous" goes back to the last image you sorted, if there is one (shortcut is "A"). The "Finalize" button deletes all the files you sorted as "No" and deletes the sorting project. You can guess what "Cancel" does.&lt;/p&gt;
&lt;p&gt;When files are sorted as "Yes," they remain in the folder you are sorting, and are simply ignored by the tool. When files are sorted as "No," they're placed in a folder called &lt;code&gt;.delete&lt;/code&gt; in the directory you are sorting. That means that files you chose "No" on aren't deleted until you finalize the project.&lt;/p&gt;
&lt;p&gt;Comic sort works differently. When you open up a comic sorting project, it displays a list of all the comics in the folder, and your decision on each one (if you've made a decision). You can double click on any comic to view it (which will open up the first page of it in your default image viewer). "Finalize" functions the same.&lt;/p&gt;
&lt;p&gt;I don't think there will be any more substantial updates to this tool; it's basically as good as I need it. If you have any suggestions, let me know.&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>Cliperizer</title><link href="/cliperizer.html" rel="alternate"></link><published>2017-06-25T08:09:00-04:00</published><updated>2017-06-25T08:09:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:None,2017-06-25:/cliperizer.html</id><summary type="html">&lt;p&gt;Tool to easily extract clips from longer videos.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nobody has long attention spans anymore. I certainly don't, at least. Consuming content in fifteen seconds or less is the new hot thing, and I've got just the tool for you!&lt;/p&gt;
&lt;p&gt;Introducing Cliperizer, the helpful tool for making clips out of longer videos! The process is pretty simple: load up a video and start playing through it. To start a clip, press the "1" key. To end a clip, press the "2" key. Then, once you're done, you can render out each clip as a seperate video, or concatenate them together to make a montage.&lt;/p&gt;
&lt;p&gt;You'll need &lt;code&gt;ffmpeg&lt;/code&gt; in your PATH. You might need VLC installed too. I know this works on Windows, not sure about Mono.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cliperizer" src="/images/cliperizer.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/cpancake/Cliperizer/releases"&gt;View releases.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cpancake/Cliperizer/releases"&gt;View source code.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I actually made it a long time ago (around October of last year), but I figured I should write about it at some point.&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>Command Line Image Utilities</title><link href="/command-line-image-utilities.html" rel="alternate"></link><published>2017-06-25T05:55:00-04:00</published><updated>2017-06-25T05:55:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:None,2017-06-25:/command-line-image-utilities.html</id><summary type="html">&lt;p&gt;A few helpful command line utilities for dealing with images. The title is pretty self-descriptive.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I often need to perform batch operations on large groups of images. Most of the time, I can do these manually, but that's often a lot of work. So I've written some simple command-line tools to automate the process.&lt;/p&gt;
&lt;p&gt;All of these tools are written in Node. They could probably be re-written in Bash if you had the time, but I don't know Bash well-enough and I don't use Linux anyways. For daily use, I put these in a folder in my PATH with batch files containing the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@node &amp;lt;path to script&amp;gt; %*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Most of these require external packages, which you can get by running &lt;code&gt;npm install &amp;lt;name&amp;gt;&lt;/code&gt; in whatever folder you put these in.&lt;/p&gt;
&lt;h2&gt;makesmaller&lt;/h2&gt;
&lt;p&gt;This is a utility for finding files that are larger than they need to be, and making them smaller. The metric for "larger than it needs to be" is 600K. I've chosen this because most files I deal with end up under 600K after this tool runs. It could be improved to avoid re-encoding files, which happens occasionally.&lt;/p&gt;
&lt;p&gt;As you can tell, I'm not exactly an image quality snob. I much prefer hard drive space.&lt;/p&gt;
&lt;p&gt;The process of encoding is done with &lt;code&gt;ffmpeg&lt;/code&gt;, which needs to be in your path. It encodes every JPEG and PNG file in the directory you run it from into a JPEG with &lt;code&gt;-q:v&lt;/code&gt; set to 2 and a width of 1000, preserving the aspect ratio.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/cpancake/5e0a873c4003e5ad8213e90e773c707b#file-makesmaller-js"&gt;View makesmaller.js on Gist.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This doesn't require any external packages.&lt;/p&gt;
&lt;h2&gt;dechanify&lt;/h2&gt;
&lt;p&gt;We've all been there. You've gone to an imageboard and downloaded a bunch of files, and now you've got a ton of files named with post IDs and that's no good. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;dechanify&lt;/code&gt; renames all of the files in a directory to their SHA-1 hashes. It's not just applicable to downloading images from an imageboard - if there's any situation where the filenames don't hold important information and you're annoyed because they're all in different formats, this is the tool for you.&lt;/p&gt;
&lt;p&gt;By default, this will only rename files whose names don't appear to be hashes - so if a file is named &lt;code&gt;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.jpg&lt;/code&gt;, it won't be renamed, because that's &lt;em&gt;technically&lt;/em&gt; a valid SHA-1 hash. If you want to be absolutely sure, run it with the &lt;code&gt;all&lt;/code&gt; parameter (like &lt;code&gt;node dechanify.js all&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/cpancake/bf7db60c4fc04d66a70ed3814fb77075#file-dechanify-js"&gt;View dechanify.js on Gist.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This requires &lt;code&gt;graceful-fs&lt;/code&gt;, to avoid going over the limit on open file handles.&lt;/p&gt;
&lt;h2&gt;dedup&lt;/h2&gt;
&lt;p&gt;There's a lot of image de-duplication tools out there. Sometimes I use one of these, because perceptual hashing does a damn good job of finding duplicates. Unfortunately, this takes a lot of time to compute and then you have to go through and check every match to see if it's truly a duplicate.&lt;/p&gt;
&lt;p&gt;What I'm looking for is a tool that checks only &lt;em&gt;exact&lt;/em&gt; duplicates - files that are byte-for-byte identical. I wrote this tool because I noticed that &lt;code&gt;dechanify&lt;/code&gt; kept telling me I had files that had the same hash, and there's almost no way that could happen if the files weren't exactly the same.&lt;/p&gt;
&lt;p&gt;By default, this tool only outputs a list of the duplicate files. If you want, you can go through this list and decide which ones to keep and which ones to delete. If you don't care for that, you can run it with the &lt;code&gt;keep-first&lt;/code&gt; parameter (like &lt;code&gt;node dedup.js keep-first&lt;/code&gt;), which'll delete all matches except for the first one found.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I'm aware Google has successfully demonstrated a collision attack on SHA-1. But I'm assuming nobody slipped a file onto my hard drive with the sole purpose of confusing my image de-duplication tool.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/cpancake/ea6a2527eaffa5f0f331dcad534ba1bd#file-dedup-js"&gt;View dedup.js on Gist.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This requires three packages: &lt;code&gt;graceful-fs&lt;/code&gt;, &lt;code&gt;single-line-log&lt;/code&gt;, and &lt;code&gt;async&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;sequencer&lt;/h2&gt;
&lt;p&gt;Sometimes I'll get files whose names are in order, but only using a natural sort - that is, 1.jpg, 2.jpg, 3.jpg ... 12.jpg, 13.jpg. This works fine in most cases (such as using Windows Explorer), but some tools mess it up (I'm looking at you, Dropbox for Android). Even worse is when you have files that &lt;em&gt;aren't&lt;/em&gt; in a sequence, but that belong in a sequence. &lt;/p&gt;
&lt;p&gt;This tool is meant to solve that. For the first case, it applies a natural sort but outputs the filenames either padded to three characters (001.jpg), or padded to the number of characters in the highest number of files (so if the last file is 1293.jpg, the first file will be 0001.jpg). This'll give it the correct sort in programs that don't use a natural sort.&lt;/p&gt;
&lt;p&gt;For the second case, you can optionally have it order by timestamp. So if you added the files to the folder in order (for example, downloading them from a website in the order they appeared), this'll probably give you the correct order. To enable this, run it with the &lt;code&gt;time&lt;/code&gt; parameter (like &lt;code&gt;node sequencer.js time&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;By default, this will only print the correct sequence - this gives you a chance to check to make sure it came out right, to avoid giving the files an even worse sequence. When you've looked it over, re-run it with the &lt;code&gt;commit&lt;/code&gt; parameter (like &lt;code&gt;node sequencer.js commit&lt;/code&gt; or &lt;code&gt;node sequencer.js time commit&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/cpancake/a27347b0871eb2021faf8ab9452a91cc#file-sequencer-js"&gt;View sequencer.js on Gist.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This doesn't require any external packages.&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>Spotify on foobar2000</title><link href="/spotify-on-foobar2000.html" rel="alternate"></link><published>2016-07-23T02:11:00-04:00</published><updated>2017-01-25T04:51:00-05:00</updated><author><name>Andrew Rogers</name></author><id>tag:None,2016-07-23:/spotify-on-foobar2000.html</id><summary type="html">&lt;p&gt;The lost art of using Spotify from something that isn't the Spotify client.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Update as of 6/25/2017&lt;/strong&gt;: It's half way through 2017 and Spotify still hasn't announced anything new about libspotify, so I think it's safe to assume they're not going to do anything about it for a while. That means that the life of foo_input_spotify, at least for the foreseeable future, relies on finding a capable alternative to libspotify.&lt;/p&gt;
&lt;p&gt;Unfortunately, all the ones I know of are abandoned or can't be used. spotify-websocket-api and node-spotify-web would work, but they're both in languages that you can't write foobar2000 plugins in (Python and Node, respectively) and they seem abandoned anyhow.&lt;/p&gt;
&lt;p&gt;The best bet for foo_input_spotify is &lt;a href="https://github.com/plietar/librespot"&gt;librespot&lt;/a&gt; (thanks to @aqua_rar on Twitter for linking this to me). It's a fully capable, as far as I know, reverse-engineered Spotify client. This means, of course, that there's a risk that this project will get hit with a C&amp;amp;D when Spotify notices, which I believe is what happened to &lt;a href="http://despotify.sourceforge.net/"&gt;despotify&lt;/a&gt;. For those of us who could care less, however, there's a bigger problem: librespot is written in Rust.&lt;/p&gt;
&lt;p&gt;This isn't as big of a deal as if it was written in Python, or Node, or in fact most other languages. Rust and C++ both compile to native code and can, in theory, interface with each other. As far as I know, this has to be done manually, going through and writing an interface yourself - though there's some projects like &lt;a href="https://github.com/Sean1708/rusty-cheddar"&gt;rusty-cheddar&lt;/a&gt; and &lt;a href="https://github.com/google/rustcxx"&gt;rustcxx&lt;/a&gt; which could make it easier.&lt;/p&gt;
&lt;p&gt;But this means that there's the possibility that foo_input_spotify could be rewritten to work past the death of libspotify. Further research is required.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update as of 1/25/2017&lt;/strong&gt;: This post seems to be getting more attention than I expected, so I'd like to clear some things up. First, I'm not the developer of this plugin! The real developer abandoned it in 2011, and the updates to libspotify, foobar2000, and Windows in the interim left the plugin broken. I did fix it up, but pretty much all I did was update the libraries involved and update the project for Visual Studio 2015. The true credit goes to Chris West for creating the plugin.&lt;/p&gt;
&lt;p&gt;Secondly, &lt;strong&gt;This plugin will almost certainly not survive the year&lt;/strong&gt;. As I mention in this article, Spotify has discontinued Libspotify, and states that it will be shut down some point this year. It hasn't happened yet, and for all I know it could happen at the end of the year, but this plugin's days are numbered. Our only hope is that Spotify claims that they'll be releasing a replacement desktop API to replace Libspotify. This hasn't happened yet, and it might not happen before Libspotify is shut down. But as far as I know, there's nothing anyone who doesn't work at Spotify can do about this.&lt;/p&gt;
&lt;p&gt;Finally, I've added a link to a fork of my fork of a fork of the original project. This fork is by a far more experienced foobar2000 developer than I, and it's probably what you're going to want to go with. This developer also recognizes that this plugin may be a lost cause thanks to Spotify's poor API management, but at least there's album art now!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;End of update&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Spotify recently &lt;a href="http://www.digitaltrends.com/music/spotify-lyrics-musixamatch/"&gt;ended its partnership with Musixmatch&lt;/a&gt;, meaning the lyrics feature of Spotify has been removed. I can get lyrics anywhere I want, but how am I going to get lyrics synced to the songs I'm playing in Spotify?&lt;/p&gt;
&lt;p&gt;Their web API doesn't expose any features for this. MPRIS was a dead-end - it's only for the Spotify client on Linux, and it's barely supported and possibly not working at that. So there's no way that I could find of retrieving song details from their native client - and my only other option was finding a way to play Spotify on a different client that has better plugin support.&lt;/p&gt;
&lt;p&gt;My first stop was foobar2000, a music player almost legendary for the amount of customization it offers. And, lucky enough, there's already &lt;a href="https://github.com/FauxFaux/foo_input_spotify"&gt;a plugin available for Spotify URIs in foobar2000&lt;/a&gt;. Just one major problem: it hasn't been updated in almost five years, and it crashes foobar2000 when you launch it.&lt;/p&gt;
&lt;p&gt;Good news: I got it working, and you can do it too!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You will need a Spotify premium account for this.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;The Easy Way&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Update as of 1/25/2017&lt;/strong&gt;: It looks like someone named Holger Stenger has been working on their own fork of this plugin. Though it's pretty recent, they've already made a lot of improvements and it's clear they've got a greater handle on foobar2000 component development than I do. &lt;a href="https://github.com/stengerh/foo_input_spotify"&gt;Check out the source and download builds here!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Old version: &lt;a href="/archives/foo_input_spotify.zip"&gt;foo_input_spotify.zip (1.5MB)&lt;/a&gt;. Open up foobar2000, go to File &amp;gt; Preferences, and click "Install..." in the bottom right. Select the zip. Click apply, restart, and head on down to Usage!&lt;/p&gt;
&lt;h2&gt;The Hard Way&lt;/h2&gt;
&lt;p&gt;Don't trust me? Ok, sure, whatever. But you're going to need to get yourself a copy of Visual Studio 2015 (don't worry, it's free). Once you've done that, download &lt;em&gt;source code&lt;/em&gt; of the &lt;code&gt;foo_input_spotify&lt;/code&gt; module linked before (or click &lt;a href="https://github.com/FauxFaux/foo_input_spotify/archive/master.zip"&gt;here&lt;/a&gt;). Once you've done that, you'll need to download the latest foobar2000 SDK, found &lt;a href="http://www.foobar2000.org/SDK"&gt;here&lt;/a&gt;. Extract it into the foobar-sdk folder in the source code you just downloaded, so that the sdk-readme.html file in the SDK is in the location &lt;code&gt;foobar-sdk/sdk-readme.html&lt;/code&gt;, relative to the source code.&lt;/p&gt;
&lt;p&gt;Now, you'll need to download the libspotify binary. Here's a problem: you can't download it anymore! Since the Spotify apparently doesn't understand the benefit of allowing third party developers to extend your service, they've discontinued libspotify, removed all downloads, and &lt;em&gt;haven't provided a direct replacement&lt;/em&gt;. Honestly.&lt;/p&gt;
&lt;p&gt;Don't worry, though, the Internet Archive is here to save what jerk developers won't. If you head over to the &lt;a href="https://web.archive.org/web/20160417073434/https://developer.spotify.com/technologies/libspotify/"&gt;old libspotify page on archive.org&lt;/a&gt;, you can download the most recent binaries. You'll be looking for the third on the list, the Win32 libspotify binary. Download that and extract it into the libspotify folder in the source code, so that the README file is at &lt;code&gt;libspotify/README&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now you're ready to get compiling! Open up &lt;code&gt;foo_input_spotify.sln&lt;/code&gt; in Visual Studio 2015, build the solution, and... hey, what's with all these errors?&lt;/p&gt;
&lt;p&gt;For whatever reason, the solution doesn't seem to compile correctly, at least for me. So you're going to need to do a bit of project reconfiguration.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cannot open include file: 'windows.h'&lt;/code&gt;: for me, the include directory for the Windows SDK is in &lt;code&gt;C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Include&lt;/code&gt;. Go to the properties for foo_input_spotify, and under C/C++ -&amp;gt; General, add the path to the SDK to the "Additional Include Directories" field.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cannot open include file: 'ctype.h'&lt;/code&gt;: the C Runtime Library is located in &lt;code&gt;C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt&lt;/code&gt; for me. Put this path in the same place you put the path to the Windows SDK (remember to include a semicolon between the paths!)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cannot open input file '..\libspotify\lib\spotify.lib'&lt;/code&gt;: I guess libspotify.lib used to be named something different in the version this guy was using? Go to the properties for foo_input_spotify, go to Linker -&amp;gt; Input, and in the "Additional Dependencies" field, change &lt;code&gt;..\libspotify\lib\spotify.lib&lt;/code&gt; to &lt;code&gt;..\libspotify\lib\libspotify.lib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mismatch detected for 'RuntimeLibrary': value 'MT_StaticRelease' doesn't match value 'MD_DynamicRelease' in cred_prompt.obj&lt;/code&gt;: Once again in the project properties for foo_input_spotify, go to C/C++ -&amp;gt; Code Generation, and change the value to "Multi-threaded" or "Multi-threaded Debug".&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's one more thing you &lt;em&gt;might&lt;/em&gt; need to do - I'm not sure. If it doesn't work, you could try changing the API key in &lt;code&gt;key-930.c&lt;/code&gt; in the foo_input_spotify source. You can get an API key &lt;a href="https://devaccount.spotify.com/my-account/keys/"&gt;here&lt;/a&gt;. I'm not sure if you need to do this, as I replaced the API key with mine when I downloaded it. &lt;/p&gt;
&lt;p&gt;Now, it should build correctly. Almost there! The built component is in &lt;code&gt;foobar2000/user-components/foo_input_spotify&lt;/code&gt;, relative to the source code. Take &lt;code&gt;libspotify.dll&lt;/code&gt; from the libspotify folder and copy it to this folder. Then, copy this folder to &lt;code&gt;%AppData\foobar2000\user-components&lt;/code&gt;. Once you start/restart foobar2000, it should be enabled!&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;Open up foobar2000 and go to File &amp;gt; Add Location (or press Ctrl-U). This will bring up the "Add Location" menu. Take a spotify URI from the official client, like &lt;code&gt;spotify:track:5IRkM1WyCMDXPnabEeqz5i&lt;/code&gt; or &lt;code&gt;spotify:user:communistpancake:playlist:2jYKvcXFolpUexOaOX3r7h&lt;/code&gt;. This should add the track(s) to your playlist. You can also search using &lt;code&gt;spotify:search:&amp;lt;term&amp;gt;&lt;/code&gt;, like &lt;code&gt;spotify:search:dead kennedys&lt;/code&gt;. This will add the first twenty results to your playlist, which isn't the best way to search - I recommend using the official client or the web client and just copying the URLs.&lt;/p&gt;
&lt;p&gt;The first time you use the API, it'll ask you for your Spotify credentials, which are saved securely to the Windows credential store. Remember - you need a Spotify premium account for this!&lt;/p&gt;
&lt;h2&gt;Lyrics&lt;/h2&gt;
&lt;p&gt;Right - the original purpose of this.&lt;/p&gt;
&lt;p&gt;What I found was the best is to just download &lt;a href="http://www.foobar2000.org/components/view/foo_uie_lyrics3"&gt;this plugin&lt;/a&gt;, which displays a pane with lyrics synced to the song's current position. It looks for local lyrics though, so it's only useful with &lt;a href="https://github.com/tripod31/foo_lyricsource"&gt;this plugin&lt;/a&gt;, which fetches lyrics from a variety of sources.&lt;/p&gt;
&lt;p&gt;That's it. Good luck, and have fun!&lt;/p&gt;</content><category term="spotify"></category><category term="music"></category><category term="programming"></category></entry><entry><title>I Made a RuneScape Bot</title><link href="/runescape-bot.html" rel="alternate"></link><published>2016-05-05T16:18:00-04:00</published><updated>2016-05-05T16:18:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:None,2016-05-05:/runescape-bot.html</id><summary type="html">&lt;p&gt;I've created a RuneScape bot to automatically drop certain items in your inventory. I may have too much free time.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've gotten back into RuneScape recently - old school, of course. It's a good game to play when you're trying to pay attention to something else, because the entire game is about grinding. &lt;/p&gt;
&lt;p&gt;Something I've always hated with RuneScape is that there's no "Drop All of Type" option. If I'm grinding mining or something, and I get a bunch of ore, sometimes I just want to drop it all on the ground instead of having to head to the bank to deposit it. Sadly, this feature has never been added.&lt;/p&gt;
&lt;p&gt;So to fix this, I made a bot to do it. Here's a video:
&lt;span class="videobox"&gt;
            &lt;video width="960" height="540" preload="none" controls poster="None"&gt;&lt;source src='/videos/dropbot.webm' type='video/webm; codecs=vp8, vorbis'&gt;&lt;/video&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;It's actually pretty simple. The "Find Inventory Items" step just takes a screenshot of the RuneScape window, then seperates out the images of each item. It then filters out the background (just using a list of colors), and computes an average hash of the image for comparison with other items. The "Drop" step then finds all the items of a type, selects a random point on each item, and lerps between the item positions and simulates mouse clicks. That's basically it.&lt;/p&gt;
&lt;p&gt;I'm not releasing it yet because it's incredibly buggy and doesn't work with anything other than the desktop Old School RuneScape client with a member account running in the default size. Maybe I'll release it. Maybe not! I don't know.&lt;/p&gt;</content><category term="projects"></category></entry></feed>