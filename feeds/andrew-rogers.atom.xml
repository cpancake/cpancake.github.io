<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>the andrew rogers webzone</title><link href="/" rel="alternate"></link><link href="/feeds%5Candrew-rogers.atom.xml" rel="self"></link><id>/</id><updated>2017-06-25T08:09:00-04:00</updated><entry><title>Cliperizer</title><link href="/cliperizer.html" rel="alternate"></link><updated>2017-06-25T08:09:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2017-06-25:cliperizer.html</id><summary type="html">&lt;p&gt;Nobody has long attention spans anymore. I certainly don't, at least. Consuming content in fifteen seconds or less is the new hot thing, and I've got just the tool for you!&lt;/p&gt;
&lt;p&gt;Introducing Cliperizer, the helpful tool for making clips out of longer videos! The process is pretty simple: load up a video and start playing through it. To start a clip, press the "1" key. To end a clip, press the "2" key. Then, once you're done, you can render out each clip as a seperate video, or concatenate them together to make a montage.&lt;/p&gt;
&lt;p&gt;You'll need &lt;code&gt;ffmpeg&lt;/code&gt; in your PATH. You might need VLC installed too. I know this works on Windows, not sure about Mono.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cliperizer" src="/images/cliperizer.jpg" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/cpancake/Cliperizer/releases"&gt;View releases.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cpancake/Cliperizer/releases"&gt;View source code.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I actually made it a long time ago (around October of last year), but I figured I should write about it at some point.&lt;/p&gt;</summary><category term="programming"></category></entry><entry><title>Command Line Image Utilities</title><link href="/command-line-image-utilities.html" rel="alternate"></link><updated>2017-06-25T05:55:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2017-06-25:command-line-image-utilities.html</id><summary type="html">&lt;p&gt;I often need to perform batch operations on large groups of images. Most of the time, I can do these manually, but that's often a lot of work. So I've written some simple command-line tools to automate the process.&lt;/p&gt;
&lt;p&gt;All of these tools are written in Node. They could probably be re-written in Bash if you had the time, but I don't know Bash well-enough and I don't use Linux anyways. For daily use, I put these in a folder in my PATH with batch files containing the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@node &amp;lt;path to script&amp;gt; %*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Most of these require external packages, which you can get by running &lt;code&gt;npm install &amp;lt;name&amp;gt;&lt;/code&gt; in whatever folder you put these in.&lt;/p&gt;
&lt;h2&gt;makesmaller&lt;/h2&gt;
&lt;p&gt;This is a utility for finding files that are larger than they need to be, and making them smaller. The metric for "larger than it needs to be" is 600K. I've chosen this because most files I deal with end up under 600K after this tool runs. It could be improved to avoid re-encoding files, which happens occasionally.&lt;/p&gt;
&lt;p&gt;As you can tell, I'm not exactly an image quality snob. I much prefer hard drive space.&lt;/p&gt;
&lt;p&gt;The process of encoding is done with &lt;code&gt;ffmpeg&lt;/code&gt;, which needs to be in your path. It encodes every JPEG and PNG file in the directory you run it from into a JPEG with &lt;code&gt;-q:v&lt;/code&gt; set to 2 and a width of 1000, preserving the aspect ratio.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/cpancake/5e0a873c4003e5ad8213e90e773c707b#file-makesmaller-js"&gt;View makesmaller.js on Gist.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This doesn't require any external packages.&lt;/p&gt;
&lt;h2&gt;dechanify&lt;/h2&gt;
&lt;p&gt;We've all been there. You've gone to an imageboard and downloaded a bunch of files, and now you've got a ton of files named with post IDs and that's no good. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;dechanify&lt;/code&gt; renames all of the files in a directory to their SHA-1 hashes. It's not just applicable to downloading images from an imageboard - if there's any situation where the filenames don't hold important information and you're annoyed because they're all in different formats, this is the tool for you.&lt;/p&gt;
&lt;p&gt;By default, this will only rename files whose names don't appear to be hashes - so if a file is named &lt;code&gt;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.jpg&lt;/code&gt;, it won't be renamed, because that's &lt;em&gt;technically&lt;/em&gt; a valid SHA-1 hash. If you want to be absolutely sure, run it with the &lt;code&gt;all&lt;/code&gt; parameter (like &lt;code&gt;node dechanify.js all&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/cpancake/bf7db60c4fc04d66a70ed3814fb77075#file-dechanify-js"&gt;View dechanify.js on Gist.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This requires &lt;code&gt;graceful-fs&lt;/code&gt;, to avoid going over the limit on open file handles.&lt;/p&gt;
&lt;h2&gt;dedup&lt;/h2&gt;
&lt;p&gt;There's a lot of image de-duplication tools out there. Sometimes I use one of these, because perceptual hashing does a damn good job of finding duplicates. Unfortunately, this takes a lot of time to compute and then you have to go through and check every match to see if it's truly a duplicate.&lt;/p&gt;
&lt;p&gt;What I'm looking for is a tool that checks only &lt;em&gt;exact&lt;/em&gt; duplicates - files that are byte-for-byte identical. I wrote this tool because I noticed that &lt;code&gt;dechanify&lt;/code&gt; kept telling me I had files that had the same hash, and there's almost no way that could happen if the files weren't exactly the same.&lt;/p&gt;
&lt;p&gt;By default, this tool only outputs a list of the duplicate files. If you want, you can go through this list and decide which ones to keep and which ones to delete. If you don't care for that, you can run it with the &lt;code&gt;keep-first&lt;/code&gt; parameter (like &lt;code&gt;node dedup.js keep-first&lt;/code&gt;), which'll delete all matches except for the first one found.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I'm aware Google has successfully demonstrated a collision attack on SHA-1. But I'm assuming nobody slipped a file onto my hard drive with the sole purpose of confusing my image de-duplication tool.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/cpancake/ea6a2527eaffa5f0f331dcad534ba1bd#file-dedup-js"&gt;View dedup.js on Gist.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This requires three packages: &lt;code&gt;graceful-fs&lt;/code&gt;, &lt;code&gt;single-line-log&lt;/code&gt;, and &lt;code&gt;async&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;sequencer&lt;/h2&gt;
&lt;p&gt;Sometimes I'll get files whose names are in order, but only using a natural sort - that is, 1.jpg, 2.jpg, 3.jpg ... 12.jpg, 13.jpg. This works fine in most cases (such as using Windows Explorer), but some tools mess it up (I'm looking at you, Dropbox for Android). Even worse is when you have files that &lt;em&gt;aren't&lt;/em&gt; in a sequence, but that belong in a sequence. &lt;/p&gt;
&lt;p&gt;This tool is meant to solve that. For the first case, it applies a natural sort but outputs the filenames either padded to three characters (001.jpg), or padded to the number of characters in the highest number of files (so if the last file is 1293.jpg, the first file will be 0001.jpg). This'll give it the correct sort in programs that don't use a natural sort.&lt;/p&gt;
&lt;p&gt;For the second case, you can optionally have it order by timestamp. So if you added the files to the folder in order (for example, downloading them from a website in the order they appeared), this'll probably give you the correct order. To enable this, run it with the &lt;code&gt;time&lt;/code&gt; parameter (like &lt;code&gt;node sequencer.js time&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;By default, this will only print the correct sequence - this gives you a chance to check to make sure it came out right, to avoid giving the files an even worse sequence. When you've looked it over, re-run it with the &lt;code&gt;commit&lt;/code&gt; parameter (like &lt;code&gt;node sequencer.js commit&lt;/code&gt; or &lt;code&gt;node sequencer.js time commit&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/cpancake/a27347b0871eb2021faf8ab9452a91cc#file-sequencer-js"&gt;View sequencer.js on Gist.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This doesn't require any external packages.&lt;/p&gt;</summary><category term="programming"></category></entry><entry><title>Migrating Perforce to Plastic</title><link href="/migrating-perforce-to-plastic.html" rel="alternate"></link><updated>2017-03-29T16:20:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2017-03-29:migrating-perforce-to-plastic.html</id><summary type="html">&lt;p&gt;I was tasked the other day with moving a project from Perforce to Plastic. There doesn't seem to be an official way of doing this, despite how much Plastic seems to be pushing for Perforce developers to move to the system. I could've just copied the files to a Plastic workspace and committed them, but I wanted to preserve the history too.&lt;/p&gt;
&lt;p&gt;I managed to find a solution using an intermediary Git repository. You'll need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Perforce (with p4 in the PATH)&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Plastic (with cm in the PATH)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Perforce -&amp;gt; Git&lt;/h2&gt;
&lt;p&gt;First, we need to set up git-p4. It's an &lt;a href="https://git-scm.com/docs/git-p4"&gt;official Git command&lt;/a&gt;, but for me it wasn't included in the distribution of Git I had. Instead, I had to &lt;a href="https://raw.githubusercontent.com/git/git/master/git-p4.py"&gt;download the script directly&lt;/a&gt; and call it using &lt;code&gt;python &amp;lt;path to git-p4.py&amp;gt;&lt;/code&gt;. If this is the case for you, substitute that for &lt;code&gt;git p4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, you're going to need to set some environment variables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;P4PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt; name and port to perforce server&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; P&lt;span class="m"&gt;4&lt;/span&gt;USER&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; P&lt;span class="m"&gt;4&lt;/span&gt;PASSWD&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I ran into some issues with Unicode files, and setting the charset seemed to work for me, so you might want to set this too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;P4CHARSET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;utf&lt;span class="m"&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before you import things to Perforce, you'll want to fix some file types. Git can't understand the "apple" file type in Perforce. It seems just changing every file in Perforce with an "apple" type to "binary" works fine. &lt;/p&gt;
&lt;p&gt;Now it's time to move it to create a Git repo from Perforce:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git p&lt;span class="m"&gt;4&lt;/span&gt; clone &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;depot&lt;/span&gt; path&amp;gt;@all &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; to new git repo&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For me, that meant:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git p&lt;span class="m"&gt;4&lt;/span&gt; clone &lt;span class="n"&gt;//Gladiator/main@all&lt;/span&gt; Gladiator-git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you've done this, you should have a representation of your Perforce project in Git.&lt;/p&gt;
&lt;h2&gt;Git -&amp;gt; Plastic&lt;/h2&gt;
&lt;p&gt;Plastic has official support for importing from Git. First, you export your git repository using &lt;code&gt;fast-export&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git fast-export --all -M --signed-tags&lt;span class="o"&gt;=&lt;/span&gt;strip --tag-of-filtered-object&lt;span class="o"&gt;=&lt;/span&gt;drop &amp;gt; ..&lt;span class="n"&gt;/git-fast-export.dat&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can simply import to Plastic with &lt;code&gt;fast-import&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cm fast-import &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&amp;gt;@&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&amp;gt; ..&lt;span class="n"&gt;/git-fast-export.dat&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="programming"></category></entry><entry><title>Sam Law in The Revenge of the Ape Who Shall Not Be Named</title><link href="/sam-law-in-harambes-revenge.html" rel="alternate"></link><updated>2016-11-10T15:57:00-05:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2016-11-10:sam-law-in-harambes-revenge.html</id><summary type="html">&lt;p&gt;I made another video game. It used to be called something else but I've changed it since the joke is dead.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cpancake.itch.io/sam-law"&gt;Itch.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/archives/harambe.zip"&gt;harambe.zip (52.8 MB)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I promise, it's not actually bad at all.&lt;/p&gt;
&lt;p&gt;Special thanks to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conro Norock&lt;/li&gt;
&lt;li&gt;Jonathan Cusdan&lt;/li&gt;
&lt;li&gt;James Rankin&lt;/li&gt;
&lt;li&gt;Bradley Schulze&lt;/li&gt;
&lt;li&gt;Michael Martin&lt;/li&gt;
&lt;li&gt;Yukon Wainczak&lt;/li&gt;
&lt;li&gt;Chloe Tibets&lt;/li&gt;
&lt;li&gt;Ween&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And hey, if you want, you should check out &lt;a href="https://www.anime-night.com/"&gt;Anime Night&lt;/a&gt;. It's a good website and it's not bad.&lt;/p&gt;
&lt;p&gt;If you want to play it on Kongregate, you can do so &lt;a href="http://www.kongregate.com/games/PlasticContainer/sam-law-in-harambes-revenge"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="video games"></category></entry><entry><title>Here's Some Menus</title><link href="/some-menus.html" rel="alternate"></link><updated>2016-09-25T18:53:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2016-09-25:some-menus.html</id><summary type="html">&lt;p&gt;I put some physical menus online. That's pretty much it.&lt;/p&gt;
&lt;p&gt;If you're a college student in the Worcester area, you might find it useful.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://cpancake.me/menus/"&gt;http://cpancake.me/menus/&lt;/a&gt;&lt;/p&gt;</summary><category term="projects"></category></entry><entry><title>Spotify on foobar2000</title><link href="/spotify-on-foobar2000.html" rel="alternate"></link><updated>2017-01-25T04:51:00-05:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2016-07-23:spotify-on-foobar2000.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Update as of 1/25/2017&lt;/strong&gt;: This post seems to be getting more attention than I expected, so I'd like to clear some things up. First, I'm not the developer of this plugin! The real developer abandoned it in 2011, and the updates to libspotify, foobar2000, and Windows in the interim left the plugin broken. I did fix it up, but pretty much all I did was update the libraries involved and update the project for Visual Studio 2015. The true credit goes to Chris West for creating the plugin.&lt;/p&gt;
&lt;p&gt;Secondly, &lt;strong&gt;This plugin will almost certainly not survive the year&lt;/strong&gt;. As I mention in this article, Spotify has discontinued Libspotify, and states that it will be shut down some point this year. It hasn't happened yet, and for all I know it could happen at the end of the year, but this plugin's days are numbered. Our only hope is that Spotify claims that they'll be releasing a replacement desktop API to replace Libspotify. This hasn't happened yet, and it might not happen before Libspotify is shut down. But as far as I know, there's nothing anyone who doesn't work at Spotify can do about this.&lt;/p&gt;
&lt;p&gt;Finally, I've added a link to a fork of my fork of a fork of the original project. This fork is by a far more experienced foobar2000 developer than I, and it's probably what you're going to want to go with. This developer also recognizes that this plugin may be a lost cause thnks to Spotify's poor API management, but at least there's album art now!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;End of update&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Spotify recently &lt;a href="http://www.digitaltrends.com/music/spotify-lyrics-musixamatch/"&gt;ended its partnership with Musixmatch&lt;/a&gt;, meaning the lyrics feature of Spotify has been removed. I can get lyrics anywhere I want, but how am I going to get lyrics synced to the songs I'm playing in Spotify?&lt;/p&gt;
&lt;p&gt;Their web API doesn't expose any features for this. MPRIS was a dead-end - it's only for the Spotify client on Linux, and it's barely supported and possibly not working at that. So there's no way that I could find of retrieving song details from their native client - and my only other option was finding a way to play Spotify on a different client that has better plugin support.&lt;/p&gt;
&lt;p&gt;My first stop was foobar2000, a music player almost legendary for the amount of customization it offers. And, lucky enough, there's already &lt;a href="https://github.com/FauxFaux/foo_input_spotify"&gt;a plugin available for Spotify URIs in foobar2000&lt;/a&gt;. Just one major problem: it hasn't been updated in almost five years, and it crashes foobar2000 when you launch it.&lt;/p&gt;
&lt;p&gt;Good news: I got it working, and you can do it too!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You will need a Spotify premium account for this.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;The Easy Way&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Update as of 1/25/2017&lt;/strong&gt;: It looks like someone named Holger Stenger has been working on their own fork of this plugin. Though it's pretty recent, they've already made a lot of improvements and it's clear they've got a greater handle on foobar2000 component development than I do. &lt;a href="https://github.com/stengerh/foo_input_spotify"&gt;Check out the source and download builds here!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Old version: &lt;a href="/archives/foo_input_spotify.zip"&gt;foo_input_spotify.zip (1.5MB)&lt;/a&gt;. Open up foobar2000, go to File &amp;gt; Preferences, and click "Install..." in the bottom right. Select the zip. Click apply, restart, and head on down to Usage!&lt;/p&gt;
&lt;h2&gt;The Hard Way&lt;/h2&gt;
&lt;p&gt;Don't trust me? Ok, sure, whatever. But you're going to need to get yourself a copy of Visual Studio 2015 (don't worry, it's free). Once you've done that, download &lt;em&gt;source code&lt;/em&gt; of the &lt;code&gt;foo_input_spotify&lt;/code&gt; module linked before (or click &lt;a href="https://github.com/FauxFaux/foo_input_spotify/archive/master.zip"&gt;here&lt;/a&gt;). Once you've done that, you'll need to download the latest foobar2000 SDK, found &lt;a href="http://www.foobar2000.org/SDK"&gt;here&lt;/a&gt;. Extract it into the foobar-sdk folder in the source code you just downloaded, so that the sdk-readme.html file in the SDK is in the location &lt;code&gt;foobar-sdk/sdk-readme.html&lt;/code&gt;, relative to the source code.&lt;/p&gt;
&lt;p&gt;Now, you'll need to download the libspotify binary. Here's a problem: you can't download it anymore! Since the Spotify apparently doesn't understand the benefit of allowing third party developers to extend your service, they've discontinued libspotify, removed all downloads, and &lt;em&gt;haven't provided a direct replacement&lt;/em&gt;. Honestly.&lt;/p&gt;
&lt;p&gt;Don't worry, though, the Internet Archive is here to save what jerk developers won't. If you head over to the &lt;a href="https://web.archive.org/web/20160417073434/https://developer.spotify.com/technologies/libspotify/"&gt;old libspotify page on archive.org&lt;/a&gt;, you can download the most recent binaries. You'll be looking for the third on the list, the Win32 libspotify binary. Download that and extract it into the libspotify folder in the source code, so that the README file is at &lt;code&gt;libspotify/README&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now you're ready to get compiling! Open up &lt;code&gt;foo_input_spotify.sln&lt;/code&gt; in Visual Studio 2015, build the solution, and... hey, what's with all these errors?&lt;/p&gt;
&lt;p&gt;For whatever reason, the solution doesn't seem to compile correctly, at least for me. So you're going to need to do a bit of project reconfiguration.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cannot open include file: 'windows.h'&lt;/code&gt;: for me, the include directory for the Windows SDK is in &lt;code&gt;C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Include&lt;/code&gt;. Go to the properties for foo_input_spotify, and under C/C++ -&amp;gt; General, add the path to the SDK to the "Additional Include Directories" field.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cannot open include file: 'ctype.h'&lt;/code&gt;: the C Runtime Library is located in &lt;code&gt;C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt&lt;/code&gt; for me. Put this path in the same place you put the path to the Windows SDK (remember to include a semicolon between the paths!)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cannot open input file '..\libspotify\lib\spotify.lib'&lt;/code&gt;: I guess libspotify.lib used to be named something different in the version this guy was using? Go to the properties for foo_input_spotify, go to Linker -&amp;gt; Input, and in the "Additional Dependencies" field, change &lt;code&gt;..\libspotify\lib\spotify.lib&lt;/code&gt; to &lt;code&gt;..\libspotify\lib\libspotify.lib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mismatch detected for 'RuntimeLibrary': value 'MT_StaticRelease' doesn't match value 'MD_DynamicRelease' in cred_prompt.obj&lt;/code&gt;: Once again in the project properties for foo_input_spotify, go to C/C++ -&amp;gt; Code Generation, and change the value to "Multi-threaded" or "Multi-threaded Debug".&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's one more thing you &lt;em&gt;might&lt;/em&gt; need to do - I'm not sure. If it doesn't work, you could try changing the API key in &lt;code&gt;key-930.c&lt;/code&gt; in the foo_input_spotify source. You can get an API key &lt;a href="https://devaccount.spotify.com/my-account/keys/"&gt;here&lt;/a&gt;. I'm not sure if you need to do this, as I replaced the API key with mine when I downloaded it. &lt;/p&gt;
&lt;p&gt;Now, it should build correctly. Almost there! The built component is in &lt;code&gt;foobar2000/user-components/foo_input_spotify&lt;/code&gt;, relative to the source code. Take &lt;code&gt;libspotify.dll&lt;/code&gt; from the libspotify folder and copy it to this folder. Then, copy this folder to &lt;code&gt;%AppData\foobar2000\user-components&lt;/code&gt;. Once you start/restart foobar2000, it should be enabled!&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;Open up foobar2000 and go to File &amp;gt; Add Location (or press Ctrl-U). This will bring up the "Add Location" menu. Take a spotify URI from the official client, like &lt;code&gt;spotify:track:5IRkM1WyCMDXPnabEeqz5i&lt;/code&gt; or &lt;code&gt;spotify:user:communistpancake:playlist:2jYKvcXFolpUexOaOX3r7h&lt;/code&gt;. This should add the track(s) to your playlist. You can also search using &lt;code&gt;spotify:search:&amp;lt;term&amp;gt;&lt;/code&gt;, like &lt;code&gt;spotify:search:dead kennedys&lt;/code&gt;. This will add the first twenty results to your playlist, which isn't the best way to search - I recommend using the official client or the web client and just copying the URLs.&lt;/p&gt;
&lt;p&gt;The first time you use the API, it'll ask you for your Spotify credentials, which are saved securely to the Windows credential store. Remember - you need a Spotify premium account for this!&lt;/p&gt;
&lt;h2&gt;Lyrics&lt;/h2&gt;
&lt;p&gt;Right - the original purpose of this.&lt;/p&gt;
&lt;p&gt;What I found was the best is to just download &lt;a href="http://www.foobar2000.org/components/view/foo_uie_lyrics3"&gt;this plugin&lt;/a&gt;, which displays a pane with lyrics synced to the song's current position. It looks for local lyrics though, so it's only useful with &lt;a href="https://github.com/tripod31/foo_lyricsource"&gt;this plugin&lt;/a&gt;, which fetches lyrics from a variety of sources.&lt;/p&gt;
&lt;p&gt;That's it. Good luck, and have fun!&lt;/p&gt;</summary><category term="spotify"></category><category term="music"></category><category term="programming"></category></entry><entry><title>Who is Satoshi Nakamoto?</title><link href="/satoshi-nakamoto.html" rel="alternate"></link><updated>2016-05-23T19:03:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2016-05-23:satoshi-nakamoto.html</id><summary type="html">&lt;p&gt;Let’s talk about Satoshi Nakamoto - the creator of Bitcoin.&lt;/p&gt;
&lt;p&gt;You’ve probably heard his name in the news lately. That’s because a man named Craig S. Wright recently claimed to be the man behind this pseudonym. He’s almost certainly not, but we’ll get to that later.&lt;/p&gt;
&lt;p&gt;Craig S. Wright is the only person to claim to be Satoshi Nakamoto and actually provide some evidence to back it up. He’s actually done it twice. But several people over the years have been accused of being Satoshi Nakamoto. Was he Dorian Satoshi Nakamoto, a 64-year-old Japanese-American former defense contractor? Or was he Hal Finney, a programmer working for the PGP corporation developing cryptography software, who died of ALS in 2014? Or even Nick Szabo, a cryptographer who in 2005 published the idea for a currency called "Bit Gold", which was strikingly similar to Bitcoin, released three years later? &lt;/p&gt;
&lt;p&gt;We’re going to go through all of these theories. But first, let’s talk about what we know about Satoshi Nakamoto himself.&lt;/p&gt;
&lt;p&gt;Satoshi Nakamoto, the identity, was born in May of 2008 when he published the original Bitcoin whitepaper to a cryptography mailing list. This whitepaper was a short eight-page overview, meant for technically-minded readers, about how such a system would work. Nakamoto had found a way to combine pre-existing cryptographic constructs in such a way to make a system like Bitcoin possible. Despite the novelty of a system that could allow money to be transmitted over the internet, Bitcoin wasn’t immediately popular.&lt;/p&gt;
&lt;p&gt;This original post can provide us with some clues as to who Satoshi Nakamoto is. For one, the name seems likely to be a pseudonym. The english in his original post is perfect, and certain words in the whitepaper are spelled in the British fashion. This suggests that Satoshi Nakamoto lived somewhere that is or was part of the UK. And this does not include Japan.&lt;/p&gt;
&lt;p&gt;There is also something implied by the fact that he saw a need to create Bitcoin. This implies some amount of distrust of financial institutions and the government. &lt;/p&gt;
&lt;p&gt;A few months later, in January of 2009, Nakamoto released version 0.1 of the Bitcoin software. With this, he created the "genesis block", the first block in the Bitcoin blockchain. This block included a message - it was the headline of the British newspaper The Times, and read "Chancellor on brink of second bailout for banks". This adds more evidence to the theory that Nakamoto is British, and that he sees a problem with the traditional banking system.&lt;/p&gt;
&lt;p&gt;One of the first replies to Nakamoto’s release of Bitcoin was by a man named Hal Finney. Finney was born in California in 1956, graduating from Caltech in 1981 with a BS in Engineering. He then went into video game development, with his credits including the Atari 2600 games Adventures of Tron, Armor Ambush, and Astrosmash. His previous exploits in cryptography included postings on the legendary Cypherpunks mailing list and running a contest to break the Netscape internet browser’s encryption. In 2004, he published a reusable proof-of-work system, commenting on its possible applications in an online payment system.&lt;/p&gt;
&lt;p&gt;Hal Finney was the first person to receive a Bitcoin transaction, from Satoshi Nakamoto himself. Bitcoin itself used a proof-of-work system similar to what Finney had proposed. Finney’s history in cryptography, his previous work, and his proximity to the Bitcoin project until his death in 2014 all suggest that he might be Satoshi Nakamoto. But is he? Let’s see what other possibilities there are.&lt;/p&gt;
&lt;p&gt;Even though we just started, it’s time for Satoshi Nakamoto to leave this story. Nakamoto’s involvement in the project only lasted until mid-2010, and that’s long before Bitcoin really became interesting. In 2010, Satoshi started talking to a developer named Gavin Andresen. Andresen, a developer based in Amherst, Massachusetts, had only recently started contributing to the Bitcoin project. He’d created a site called "Bitcoin Faucet", which would give free Bitcoins to anyone who wanted to play around with them. As Andresen became more involved in the project, Nakamoto began to trust his judgement more and more. Eventually, Nakamoto offered to place Andresen’s email address on the Bitcoin website, as someone people could contact for help. What Andresen didn’t know was that his email was replacing Nakamoto’s - Nakamoto was, in a kind of sneaky way, distancing himself from the project.&lt;/p&gt;
&lt;p&gt;Soon after, Nakamoto handed over control of the project page, and the key to the Bitcoin alert system to Andresen. He hasn’t been heard from since, and though Nakamoto controls around a million bitcoins, worth around $440 million dollars at this time, they haven’t been moved. &lt;/p&gt;
&lt;p&gt;Why did he leave the project? There’s several theories. One of them was that he was displeased as to the transformation of the Bitcoin community from that of a small group of cryptography-minded futurists to one of money-focused libertarians and anarchists. However, there is some evidence that he was worried about increasing government interest into Bitcoin. Some of his last posts on the Bitcoin Forums were about his fears that Wikileaks accepting Bitcoin donations might lead to the wrong kind of attention on the project, stating that "the heat you would bring would likely destroy us at this stage." Probably the most damning evidence for this theory is that Gavin Andresen states that his last email to Nakamoto was about a meeting Andresen was about to have with the CIA about Bitcoin.&lt;/p&gt;
&lt;p&gt;Whatever the reason, Nakamoto was gone by the end of 2010. But the human mind, in the absence of facts, loves to speculate. Such was the case with Nakamoto: now that he was gone, people began to speculate about his true identity.&lt;/p&gt;
&lt;p&gt;The first serious theory as to his identity came about in 2011. It was then, in a piece in the New Yorker, that Joshua Davis claimed that the true identity of Satoshi Nakamoto was that of Michael Clear, a graduate student in cryptography at Trinity College in Dublin. He’d written papers about peer-to-peer technology, which Bitcoin uses, and had worked for Allied Irish Banks on improving their currency trading software. Evidently, Clear had a fair bit of experience in economics and cryptography. Davis met Clear, and Clear pointed him to another man named Vili Lehdonvirta. Lehdonvirta denied it, and Clear stated that "I’m not Satoshi, but even if I was I wouldn’t tell you." After the story was published, Clear stated that he was joking when he said "even if I was I wouldn’t tell you," and that he was definitely not Satoshi Nakamoto.&lt;/p&gt;
&lt;p&gt;The day after the link was made between Clear and Nakamoto, another author published their theory. This author, Adam Penenberg, had taken phrases from the Bitcoin whitepaper and googled them, with the idea that the true author of Bitcoin would repeat themselves. This led them to a patent application for a "System and method for providing secure communications," filed just three days before the "bitcoin.org" domain name had been registered. This patent had included the term "computationally impractical to reverse," which it shared with the Bitcoin whitepaper. This author reasoned that the chances of a patent of a cryptographic system being filed three days before Bitcoin’s domain name was registered, sharing a phrase with the Bitcoin whitepaper, and yet being completely unrelated to Bitcoin in any way was pretty slim. The patent was filed by three people: Neal King, Vladimir Oksman, and Charles Bry. The author then goes on to provide evidence they admit is circumstantial to continue linking them to Bitcoin. &lt;/p&gt;
&lt;p&gt;While none of this proves that King, Oksman, and Bry are the true creators of Bitcoin, there’s no reason to believe that Satoshi Nakamoto is just one person.&lt;/p&gt;
&lt;p&gt;In 1934, a group of French mathematicians met in a Parisian cafe. Their purpose was to describe math from the ground up, describing every modern mathematical concept, including complete proofs. The group chose to publish under the name Nicolas Bourbaki. Though the group’s members weren’t anonymous like those of a possible Satoshi Nakamoto group, there certainly exists a historical precedent for a group of likeminded people to take on a pseudonym with the purpose of accomplishing a goal. &lt;/p&gt;
&lt;p&gt;But without any definitive proof linking the three to Bitcoin, the search continued.&lt;/p&gt;
&lt;p&gt;In December of 2013, a blogger, who went by the name of Skye Grey, claimed to have linked the writing of Satoshi Nakamoto to that of a researcher named Nick Szabo using stylometric analysis. Stylometry is basically trying to compare the writing style of two people to check if they’re the same, and this blogger claimed that Szabo was the closest match. Later, in April of 2014, a team of forty graduate students in forensic linguistics at Ashton University took a look at it. The leader of the study, Dr. Jack Grieve, stated that "We are pretty confident that out of the list of people regularly referred to as possibilities, Nick Szabo is the main author of the paper, though we can’t rule out the possibility that others contributed." Szabo denies any link, and told one author that "I'm afraid you got it wrong doxing me as Satoshi, but I'm used to it." "Doxxing" is an internet term used to mean publishing someone’s personal information - their "dox" - generally for use by internet vigilantes. In this case, though, he’s using it to mean "accusing." &lt;/p&gt;
&lt;p&gt;While Dr. Grieve’s study was still underway, another theory came up. Newsweek, the news magazine, had transitioned to digital-only publishing at the end of 2012. But the company was bought in August of 2013, and announced that they were returning to print on March 7th, 2014. For this triumphant return to print, they decided that their cover story was going to be about Satoshi Nakamoto, titled "The Face Behind Bitcoin." This story, written by Leah Goodman, claimed that the creator of Bitcoin was a man named Satoshi Nakamoto… Dorian Satoshi Nakamoto. Goodman’s theory was that Satoshi Nakamoto couldn’t be a synonym, though the justification for why it wouldn’t be wasn’t quite satisfactory for many. But she went and met Dorian Nakamoto. Dorian, born in 1949 in Japan, moved to California with his mother at age ten. There, he became interested in science and math, later working for Hughes Aircraft on classified defense projects after college. He was a libertarian, and distrusted the government. He also hadn’t had a steady job since 2001, which would give him the time to develop Bitcoin. His family described him as strange, secretive, and paranoid, which seem to fit the Satoshi Nakamoto who created Bitcoin. When Goodman met Satoshi Nakamoto, he said very little: "I am no longer involved in that and I cannot discuss it. It's been turned over to other people. They are in charge of it now. I no longer have any connection." So that’s a pretty solid confirmation, then, right? Well, no. Nakamoto, through his lawyer, denied having ever worked on Bitcoin. And a reply like that is exactly the kind of reply one would give if they had a limited grasp of english and had worked on classified projects in their past. And that still doesn’t answer - why would someone who values their anonymity choose to go by their real name online?&lt;/p&gt;
&lt;p&gt;Here’s an interesting tidbit - Dorian Nakamoto lived just blocks from Hal Finney. Had Nakamoto been the person who created Bitcoin, it could be that this is the reason that Finney was the first recipient of a Bitcoin transaction. And if Finney had created Bitcoin, this could be how he came up with the name.&lt;/p&gt;
&lt;p&gt;And here’s where we get to Craig S. Wright. Unlike the others, Wright doesn’t deny being Satoshi Nakamoto. In fact, he’s the one who’s claimed to be him - twice. The first time, on December 8th, 2015, Wired Magazine claimed that the true Satoshi Nakamoto was Craig Steven Wright. They discovered this thanks to an "anonymous source close to Wright" who provided them with the evidence. This evidence was, as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A blogpost by Wright from August 2008, months before Satoshi Nakamoto’s original announcement, stating that he was working on a, quote, "cryptocurrency paper." A cryptocurrency is the anachronistic term for currencies like Bitcoin. I say "anachronistic" because "cryptocurrency" as a term didn’t exist until years after Bitcoin came along.&lt;/li&gt;
&lt;li&gt;Another post on the blog stating that users could get in touch with him using a PGP public key linked to Satoshi Nakamoto. A PGP public key is a one-way encryption key - it can encrypt messages, but it can’t decrypt messages. So you can publish your "public key" and keep your private key, and people can send you encrypted messages but only you can decrypt them. This public key was linked to the email address "satoshin@vistomail.com", an address Nakamoto was known to control, and was dated on a public PGP key database as being added October 30th, 2008. &lt;/li&gt;
&lt;li&gt;A $30m Bitcoin investment by Wright into a trust he operated. They reason that he got these Bitcoins because he was Satoshi Nakamoto, owner of a vast Bitcoin fortune.&lt;/li&gt;
&lt;li&gt;More "Leaked details" from their "anonymous source"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But it soon came out that most of these details were fabricated. The blog posts had been edited after the fact. The PGP key had been added to the database in 2015 and backdated to 2008. &lt;/p&gt;
&lt;p&gt;As for his investment in the trust - well, he didn’t actually "transfer" the Bitcoin to the trust - he just "assigned the rights" to the Bitcoin. Meaning that he didn’t actually have to prove that he had them.&lt;/p&gt;
&lt;p&gt;The day after the article was published, Wright had his house raided by the Australian Federal Police over an Australian Tax Office investigation. It seems that his claim that he was the true Satoshi Nakamoto could be involved in several interwoven layers of scams, involving $1.5m dollars that the Australian Tax Office paid out to one of his companies that they’d really like to get back.&lt;/p&gt;
&lt;p&gt;Whatever the reason for his claim, if he is Satoshi Nakamoto, he’s going through a lot of work to make it look like he’s trying to lie about it. &lt;/p&gt;
&lt;p&gt;His second attempt came earlier this month. On May 2nd, he wrote a blog post claiming - again - to be Satoshi Nakamoto. Then, journalists from The Economist and the BBC claimed to have watched Wright demonstrate that he had the private key associated with the first Bitcoin transaction. This claim was backed up by Gavin Andresen. He then published a blog post claiming that it contained cryptographic proof of his Nakamoto-ness, to which several people - including Bitcoin developers Peter Todd and Jeff Garzik - stated that it contained no proof whatsoever, and that security researcher Dan Kaminsky claimed was "intentional scammery." Wright then claimed that he would provide "a series of foundations for this extraordinary claim," but the next day stated that he "did not have the courage" to publish the proof. &lt;/p&gt;
&lt;p&gt;Given that Wright’s proof is either told to us second hand by tech journalists or is falsified, it’s easy to say that he’s not the true Satoshi Nakamoto. But what of the others? Every one of these theories has several reasons why it could be and several reasons why it couldn’t. And when the evidence is as circumstantial as it is either way, it’s hard to make a definitive claim that someone is or isn’t Satoshi Nakamoto (well, other than Wright - we can definitely say he is). The best proof would be for someone to move Satoshi Nakamoto’s coins. That way, we would know that either they are the real Satoshi Nakamoto, or they got ahold of his Bitcoin wallet somehow - and that’s more than anyone else can say. And until that happens? We probably won’t know. &lt;/p&gt;</summary><category term="projects"></category></entry><entry><title>I Made a RuneScape Bot</title><link href="/runescape-bot.html" rel="alternate"></link><updated>2016-05-05T16:18:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2016-05-05:runescape-bot.html</id><summary type="html">&lt;p&gt;I've gotten back into RuneScape recently - old school, of course. It's a good game to play when you're trying to pay attention to something else, because the entire game is about grinding. &lt;/p&gt;
&lt;p&gt;Something I've always hated with RuneScape is that there's no "Drop All of Type" option. If I'm grinding mining or something, and I get a bunch of ore, sometimes I just want to drop it all on the ground instead of having to head to the bank to deposit it. Sadly, this feature has never been added.&lt;/p&gt;
&lt;p&gt;So to fix this, I made a bot to do it. Here's a video:
&lt;div class="videobox"&gt;
            &lt;video width="960" height="540" preload="none" controls poster="None"&gt;&lt;source src='/videos/dropbot.webm' type='video/webm; codecs=vp8, vorbis'&gt;&lt;/video&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;It's actually pretty simple. The "Find Inventory Items" step just takes a screenshot of the RuneScape window, then seperates out the images of each item. It then filters out the background (just using a list of colors), and computes an average hash of the image for comparison with other items. The "Drop" step then finds all the items of a type, selects a random point on each item, and lerps between the item positions and simulates mouse clicks. That's basically it.&lt;/p&gt;
&lt;p&gt;I'm not releasing it yet because it's incredibly buggy and doesn't work with anything other than the desktop Old School RuneScape client with a member account running in the default size. Maybe I'll release it. Maybe not! I don't know.&lt;/p&gt;</summary><category term="projects"></category></entry><entry><title>Hamlet: The Movie: The Game</title><link href="/hamlet-the-movie-the-game.html" rel="alternate"></link><updated>2015-12-17T17:11:00-05:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2015-12-17:hamlet-the-movie-the-game.html</id><summary type="html">&lt;p&gt;Here's a game I made for a school project. It's called &lt;em&gt;Hamlet: The Movie: The Game&lt;/em&gt;, despite having basically nothing to do with any of the &lt;em&gt;Hamlet&lt;/em&gt; movies. It is, however, a game. A rhythm game! Yeah.&lt;/p&gt;
&lt;p&gt;Here's the download:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/archives/hamlet.zip"&gt;hamlet.zip (42.1 MB)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Give it a play or whatever you do with video games. &lt;/p&gt;
&lt;p&gt;Here's some credits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Me - I made the game.&lt;/li&gt;
&lt;li&gt;Various models by Nemeth Designs, oliviergide, arataca, and DGordillo&lt;/li&gt;
&lt;li&gt;The song is Samurai by F.C.F.&lt;/li&gt;
&lt;li&gt;The voice clips are from the Mel Gibson &lt;em&gt;Hamlet&lt;/em&gt; film.&lt;/li&gt;
&lt;li&gt;The character models were created in Mixamo.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="video games"></category></entry><entry><title>Rant Lite (a very bad idea)</title><link href="/rant-lite.html" rel="alternate"></link><updated>2015-07-26T05:26:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2015-07-26:rant-lite.html</id><summary type="html">&lt;p&gt;For once, I finally have a project where I want to use Rant instead of just contributing to it. The problem is that this project is written in Javascript - specifically, browser-based Javascript - so I can't use Rant out of the box. So I thought I'd try out JSIL, a tool that converts compiled IL code (.NET assemblies) into Javascript. How bad could it be?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pretty bad." src="/images/rant-lite-1.png" /&gt;&lt;/p&gt;
&lt;p&gt;If you don't think nearly 25MB of scripts is ridiculous, you probably don't do much web dev. jQuery, clocking in at ~82kb minified, is considered hefty. This size was just unmanageable. So I thought "Well, maybe if I minify it?"&lt;/p&gt;
&lt;p&gt;&lt;img alt="Erm, sort of." src="/images/rant-lite-2.png" /&gt;&lt;/p&gt;
&lt;p&gt;Well, that kind of worked. It squeezed out about 5MB, which is alright. It's still not good enough. So I tried gzipping it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Woop!" src="/images/rant-lite-3.png" /&gt;&lt;/p&gt;
&lt;p&gt;I'd prefer smaller, but 1.4MB is good enough. But then the question arose: how am I going to get it to clients? I don't want the server to have to gzip 19MB of content on every request, and it should be loaded during the asset loading stage anyways so that the page doesn't hang. It was then that I came up with a very bad idea: I was already using browserify, which has a ported version of zlib. I wonder...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;extractJsz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;zlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gunzipSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Utf8ArrayToStr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Utf8ArrayToStr implementation goes here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It was a bad idea, but it worked. It was slow, but it was faster than downloading 19MB of scripts. However, there was another problem: while the script was executing, it wasn't &lt;em&gt;working&lt;/em&gt;. It was then that I went back and bothered to read the rest of the docs for JSIL.&lt;/p&gt;
&lt;p&gt;Apparently, though there are no hidden secrets for reducing the size of your scripts by 24MB (at least none that I found), the docs did contain a "helpful" bit of information: JSIL comes with a synchronous loader that it forces you to use. That is, you can't load your scripts the way you want to load them - at least, not in a way that's documented - and more importantly, there's no way I could fit my hacked together gzipping contraption into there. I also just didn't like the idea of having to package so many loose dependencies loaded outside of my control. So I came up with a different, possibly worse idea.&lt;/p&gt;
&lt;h2&gt;Rant Lite&lt;/h2&gt;
&lt;p&gt;With JSIL off the table, I looked at my options for porting Rant to Javascript. I could either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Port Rant to Javascript.&lt;/li&gt;
&lt;li&gt;Port a small part of Rant to Javascript.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I went with the second option, because I'm lazy. I put together a PEG.js grammar, wrote a loader for rantpkg files, and a really lazy runtime. And yes, it's recursive. I'm sorry.&lt;/p&gt;
&lt;p&gt;The result is a clone of Rant that only supports queries, blocks, and block weights. Because as far as I can tell, that's all I need. It only supports loading rantpkg files, since it's easier than trying to write a new dictionary format parser in Javascript. And it doesn't support multiple queries on the first item in a block, because I fucked up the grammar and I'll fix it later damn it.&lt;/p&gt;
&lt;p&gt;The resulting PEG.js grammar looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;rant&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="nx"&gt;item&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;block&lt;/span&gt;
  &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;
  &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;text_acceptable&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;block&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;first_weight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;block_weight&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;first_item&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;block_item&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;|&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;block_weight&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;block_item&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;}&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;first_item&lt;/span&gt; &lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;weights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;first_weight&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;first_weight&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;r.length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;block&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;weights&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;weights&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;block_weight&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;block_item&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;
  &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;text_acceptable&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;query&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;acceptable&lt;/span&gt; &lt;span class="nx"&gt;subtype&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="nx"&gt;acceptable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="o"&gt;\-&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;acceptable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subtype&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;subtype&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;query&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;subtype&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cs&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;number&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt;&lt;span class="cp"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="nx"&gt;acceptable&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="na"&gt;-Za-z0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;

&lt;span class="nx"&gt;text_acceptable&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="na"&gt;-Za-z0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:;,&lt;/span&gt;&lt;span class="o"&gt;\-\&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;$%&amp;amp;\*]&lt;/span&gt;

&lt;span class="s1"&gt;space = [ &lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s1"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I might release it at some point, but I don't see anyone else really having much use for it. Plus I don't think it's Rant compatible. At some point I'll get around to writing a proper Javascript port of Rant. One of these days...&lt;/p&gt;</summary><category term="programming"></category><category term="rant"></category></entry><entry><title>Richard 1.0 - Rant's New Scripting Engine</title><link href="/richard.html" rel="alternate"></link><updated>2015-06-26T04:10:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2015-06-25:richard.html</id><summary type="html">&lt;p&gt;Rant 2.0 is almost here, and it launches with a new scripting language I wrote called Richard! We're still ironing out the bugs and writing the documentation and the standard library, but here's a post describing most of what Richard is about.&lt;/p&gt;
&lt;h2&gt;The History of Richard&lt;/h2&gt;
&lt;p&gt;Let's look back to Rant 1.0, all those months ago. Rant 1.0 had a syntax for simple arithmetic operations. This supported basic math operations as well as variables. A simple arithmetic expression would look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;`a = 10; a += 5; a` # 15
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Though it served its purpose well, it lacked many features. The only variable type was a number type (double), and any kind of control flow wasn't possible. The &lt;a href="https://github.com/TheBerkin/Rant/tree/2222c119d08235abd611de81427605230c0fb9b4/Rant/Engine/Arithmetic"&gt;arithmetic parser&lt;/a&gt; itself wasn't well integrated with the rest of Rant, using a different lexer and "VM" than the rest of Rant.&lt;/p&gt;
&lt;p&gt;The new scripting system was originally divided into separate issues: &lt;a href="https://github.com/TheBerkin/Rant/issues/40"&gt;we needed to add a string type to the arithmetic system&lt;/a&gt;, we needed to integrate the variable system with all the other types of variables (carriers and subroutines), and we needed to integrate the parser with the rest of Rant. We eventually realized that we would be better off just redesigning the language itself, leading to &lt;a href="https://github.com/TheBerkin/Rant/issues/46"&gt;the idea of a new language inside of Rant called Rave&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Originally, &lt;a href="https://github.com/TheBerkin/Rant/issues/49"&gt;Rave was going to compile into bytecode&lt;/a&gt; similar to IL, which would run on a VM within Rant. However, &lt;a href="https://github.com/TheBerkin/Rant/pull/54"&gt;Berkin figured out a way to restructure the Rant parser and VM to remove recursion&lt;/a&gt;, and we decided that using this system for Rave would be best. At some point Berkin decided to use Rave as the name of &lt;a href="https://github.com/TheBerkin/Rant/tree/dev/Rave"&gt;the Rant command line utility for dictionaries&lt;/a&gt;, and so the scripting engine was renamed Richard, for completely mature reasons.&lt;/p&gt;
&lt;p&gt;After a lot of hard work and spaghetti code, Richard was committed in &lt;a href="https://github.com/TheBerkin/Rant/commit/901be7f109701df7711586338d6b94e9d39f17e5"&gt;901be7f&lt;/a&gt;. We're still working out the bugs and adding some new features.&lt;/p&gt;
&lt;h2&gt;The Basics&lt;/h2&gt;
&lt;p&gt;Richard is pretty similar to Javascript, if Javascript was smaller, less featureful, and written by someone who had never written a programming language before. It runs within Rant, and is contained within a [@ ... ] tag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[@ 2 + 2 ]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Richard has variables - obviously - of which there are two syntaxes. The regular &lt;code&gt;name = value;&lt;/code&gt; syntax works, and will create the variable in the current scope. There is also a &lt;code&gt;var name = value;&lt;/code&gt; or just &lt;code&gt;var name;&lt;/code&gt; syntax, which will create the variable in the current scope whether or not a value is given.&lt;/p&gt;
&lt;p&gt;There are nine basic types in Richard:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;number&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;string&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bool&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;object&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pattern string&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;no&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;undefined&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And what are all of these sweet types?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;number&lt;/strong&gt; types are internally represented as a double (i.e. a 64-bit double-precision number). Basic infix operations are supported - &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt; - as well as groups - &lt;code&gt;(2 + 2) / 2&lt;/code&gt;. Order of operations applies, of course. There are assignment versions of those as well - &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, &lt;code&gt;/=&lt;/code&gt;, and &lt;code&gt;%=&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;string&lt;/strong&gt; types are .NET strings internally, which means I think they support Unicode. I'm not entirely sure. They are delimited by double quotes - single quotes not supported. There is a length property, accessible through the same way as any other object property - &lt;code&gt;"string".length&lt;/code&gt; or &lt;code&gt;"string"["length"]&lt;/code&gt;. You can also use an array indexer if you want to get a certain character of a string i.e. &lt;code&gt;"string"[2] # "r"&lt;/code&gt;. String concatenation is done using a special operator à la D. That is, the operator is &lt;code&gt;~&lt;/code&gt;. It will cast whatever is on the right side of it to a string if it isn't already a string, but the left side must be either a string or a pattern string. There is also an assignment version - &lt;code&gt;~=&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;bool&lt;/strong&gt; types are just simple booleans. &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, you know the deal. There are a few boolean operators which return bool values. You probably know these from other languages: &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, and &lt;code&gt;!&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;list&lt;/strong&gt; types are lists of objects. There are three ways of defining them: a bare list syntax, using just commas - &lt;code&gt;x = 1, 2, 3, 4, 5;&lt;/code&gt;, a bracket syntax like in Javascript - &lt;code&gt;x = [1, 2, 3, 4, 5]&lt;/code&gt;, and a list initializer for creating empty lists of a certain length - &lt;code&gt;x = list 12;&lt;/code&gt;. When using the bare list syntax, any variables specified within that are lists will be expanded - that is, you can use the bare list syntax to concat two lists together: &lt;code&gt;x = 1, 2; y = 3, 4, 5; z = x, y;&lt;/code&gt;. If you don't want this, you can use the bracket syntax. You should also use the bracket syntax for creating a list of lists, or for passing lists as an argument to function calls, or for creating lists inside of object literals. You can access a list's length using the &lt;code&gt;length&lt;/code&gt; property: &lt;code&gt;x = 1, 2, 3, 4, 5; x.length # 5&lt;/code&gt;. If a list is returned from an expression (it's the last value evaluated, or it's explicitly returned using a return statement), it will be executed as a block in Rant.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;object&lt;/strong&gt; types are key/value objects, like in Javascript. And similarly to Javascript, the syntax is JSON. &lt;em&gt;Not&lt;/em&gt; Javascript object syntax, but JSON. That means all key names must be either strings or just bare text (i.e. &lt;code&gt;{test: 2}&lt;/code&gt;). You can access an object's property via dot syntax (&lt;code&gt;{"test":2}.test&lt;/code&gt;) or via bracket accessor syntax (&lt;code&gt;{"test":2}["test"]&lt;/code&gt;). You can also set object properties the same way i.e. &lt;code&gt;x = {"test":2}; x.test = 3; x["test"] = 4&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;function&lt;/strong&gt; types are, well, functions. There are two ways to define them: using a C-like syntax - &lt;code&gt;x = function(a, b) { a + b };&lt;/code&gt; - or using a lambda syntax - &lt;code&gt;x = (a, b) =&amp;gt; a + b;&lt;/code&gt; Function calls are the same as every other language: &lt;code&gt;x(2, 3)&lt;/code&gt;. You can return things from them using a &lt;code&gt;return&lt;/code&gt; statement, just like every other language, though it'll return the last value evaluated in the function if there's no return statement. You can also &lt;code&gt;return&lt;/code&gt; from any other statement in Richard, which will end the expression and return the value to the Rant pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;pattern string&lt;/strong&gt; types are like strings, but they can be executed as Rant patterns. It is declared using a dollar sign in front of a string: &lt;code&gt;$"&amp;lt;noun&amp;gt;"&lt;/code&gt;. They can be executed two ways: using a function call - &lt;code&gt;$"&amp;lt;noun&amp;gt;"()&lt;/code&gt; - or by being returned from an expression. You can use a concatenation operator like strings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;no&lt;/strong&gt; is a null value. This means that it is a value that has been &lt;em&gt;explicitly&lt;/em&gt; set to null. It's a constant: &lt;code&gt;x = no&lt;/code&gt;. Why &lt;code&gt;no&lt;/code&gt; instead of null? It's funny.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;undefined&lt;/strong&gt; is a value that hasn't been set yet. In Richard, this type is identified by the constant &lt;code&gt;???&lt;/code&gt; - that is, if you set something to undefined (why?), it would look like this: &lt;code&gt;x = ???&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Statements&lt;/h3&gt;
&lt;p&gt;There are a few control flow statements in Richard.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;if&lt;/strong&gt; statements, along with their companion &lt;strong&gt;else&lt;/strong&gt; statements, are a way of conditionally executing a specified block of code. You use them like you do in any other language:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;It&amp;#39;s true!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;This should never happen.&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;while&lt;/strong&gt; statements are, again, the same as they are in every language since C:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Convert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;for&lt;/strong&gt; statements are different! They're actually &lt;code&gt;for..in&lt;/code&gt; statements, like in Javascript. The reasoning is that there are very few times that you ever need to use a for loop in a way that's not just iterating over something from beginning to end, and if you want to do that, you can use a while loop.&lt;/p&gt;
&lt;p&gt;You can use a &lt;code&gt;for..in&lt;/code&gt; loop to iterate over lists or objects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;this&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;is&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;key1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;key2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;another string&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can tell, the key is returned, not the object. For arrays, this will be the index.&lt;/p&gt;
&lt;p&gt;You can &lt;code&gt;break&lt;/code&gt; out of both kinds of loops.&lt;/p&gt;
&lt;h2&gt;Standard Library&lt;/h2&gt;
&lt;p&gt;Richard currently doesn't have a very robust standard library, though we'll be adding to it constantly.&lt;/p&gt;
&lt;p&gt;For now, there's two types of standard library functions: properties and global objects. Properties are created on a specific type of object, and can be used on any type of that object. For example, &lt;code&gt;string&lt;/code&gt; types have a &lt;code&gt;length&lt;/code&gt; property, and &lt;code&gt;list&lt;/code&gt; types have a &lt;code&gt;last&lt;/code&gt; property. Global objects are global Richard key/value objects which have properties of their own. For example, there's a &lt;code&gt;Math&lt;/code&gt; global object, which has a property &lt;code&gt;PI&lt;/code&gt; which returns the mathematical constant Pi. It also has functions like &lt;code&gt;sin&lt;/code&gt; and &lt;code&gt;atan2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There isn't documentation for the standard library yet (I haven't written the extension for Constitution), but every function has tests, and you can take a look at those.&lt;/p&gt;
&lt;h2&gt;Sample Program&lt;/h2&gt;
&lt;p&gt;I'm too lazy to write my own sample program, but here's one Berkin wrote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
          &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;~=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;~=&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's an implementation of some Linq-inspired features in Richard. I'll probably add some of these (where / filter, map / select, reduce, etc) into the Richard standard library before release.&lt;/p&gt;
&lt;h2&gt;In Conclusion&lt;/h2&gt;
&lt;p&gt;Richard is currently really buggy, but it's still usable! If you find any bugs, please add a test for it! We're especially concerned about "white" exceptions, i.e. exceptions that aren't RantRuntimeExceptions or RantCompilerExceptions.&lt;/p&gt;</summary><category term="programming"></category><category term="rant"></category></entry><entry><title>PSA: Node.js NPM Visual Studio Error</title><link href="/psa-node-error.html" rel="alternate"></link><updated>2014-07-28T22:03:00-04:00</updated><author><name>Andrew Rogers</name></author><id>tag:,2014-07-28:psa-node-error.html</id><summary type="html">&lt;p&gt;If you are, like me, developing on Windows, and you, like me, have multiple versions of Visual Studio installed, you might see this error when a Node.js package needs to build something:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\V120\Microsoft.Cpp.Platform.targets(64,5): error MSB8020: The build tools for Visual Studio 2010 (Platform Toolset = &amp;#39;v100&amp;#39;) cannot be found. To build using the v100 build tools, please install Visual Studio 2010 build tools.  Alternatively, you may upgrade to the current Visual Studio tools by selecting the Project menu or right-click the solution, and then selecting &amp;quot;Upgrade Solution...&amp;quot;. [C:\wamp\node\spotify\node_modules\spotify-web\node_modules\ws\build\bufferutil.vcxproj]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is an annoying and unfortunately common error for me when installing packages through NPM. After scouring the internet, it turns out that this is an error with gyp, meaning that neither the NPM or node-gyp folks can fix it. However, you can pass a command line parameter to npm to specify what version to build with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;npm install spotify-web -msvs_version=2013
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This parameter specifies what version of Visual Studio the library should build with. You can use any version, but I prefer the latest (2013).&lt;/p&gt;</summary><category term="programming"></category></entry></feed>